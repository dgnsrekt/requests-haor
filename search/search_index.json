{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"requests-whaor [ ri-kwests hawr ] Requests + Docker + HAproxy + Tor Requests **W**ith **H**igh **A**vailability **O**nion **R**outer. For the filthiest web scrapers that have no time for rate-limits. Overview requests-whaor proxies GET requests through a local Docker network of TOR circuits. It takes care of starting and stopping a pool of TOR proxies behind an HAproxy load balancer, which acts as a round robin reverse proxy network. This will give each request a new IP address. If you start having issues with the initial pool of IPs, requests-whaor can gather a new pool of IP addresses by restarting all TOR containers . Install with pip pip install requests-whaor Install with Poetry poetry add requests-whaor >> Quickstart / Docs << Projects to highlight. dperson's - torproxy docker container zet4's - alpine-tor library torproject haproxy Useful Docker commands. If things get out of hand you may need these commands for debugging or killing containers. docker ps -q --filter ancestor=osminogin/tor-simple | xargs -L 1 docker logs --follow docker ps -q --filter ancestor=osminogin/haproxy | xargs -L 1 docker logs --follow docker stop $(docker ps -q --filter ancestor=osminogin/tor-simple) docker stop $(docker ps -q --filter ancestor=haproxy) docker network rm $(docker network ls -q -f name=whaornet) TODO Testing. More request methods if requested. Options for using different Tor containers. Options for different load balancer containers. Contact Information Telegram = Twitter = Tradingview = Discord = @dgnsrekt Email = dgnsrekt@pm.me","title":"Home"},{"location":"#requests-whaor-ri-kwests-hawr","text":"Requests + Docker + HAproxy + Tor Requests **W**ith **H**igh **A**vailability **O**nion **R**outer. For the filthiest web scrapers that have no time for rate-limits.","title":"requests-whaor [ri-kwests hawr]"},{"location":"#overview","text":"requests-whaor proxies GET requests through a local Docker network of TOR circuits. It takes care of starting and stopping a pool of TOR proxies behind an HAproxy load balancer, which acts as a round robin reverse proxy network. This will give each request a new IP address. If you start having issues with the initial pool of IPs, requests-whaor can gather a new pool of IP addresses by restarting all TOR containers .","title":"Overview"},{"location":"#install-with-pip","text":"pip install requests-whaor","title":"Install with pip"},{"location":"#install-with-poetry","text":"poetry add requests-whaor","title":"Install with Poetry"},{"location":"#quickstart-docs","text":"","title":"&gt;&gt; Quickstart / Docs &lt;&lt;"},{"location":"#projects-to-highlight","text":"dperson's - torproxy docker container zet4's - alpine-tor library torproject haproxy","title":"Projects to highlight."},{"location":"#useful-docker-commands","text":"","title":"Useful Docker commands."},{"location":"#if-things-get-out-of-hand-you-may-need-these-commands-for-debugging-or-killing-containers","text":"docker ps -q --filter ancestor=osminogin/tor-simple | xargs -L 1 docker logs --follow docker ps -q --filter ancestor=osminogin/haproxy | xargs -L 1 docker logs --follow docker stop $(docker ps -q --filter ancestor=osminogin/tor-simple) docker stop $(docker ps -q --filter ancestor=haproxy) docker network rm $(docker network ls -q -f name=whaornet)","title":"If things get out of hand you may need these commands for debugging or killing containers."},{"location":"#todo","text":"Testing. More request methods if requested. Options for using different Tor containers. Options for different load balancer containers.","title":"TODO"},{"location":"#contact-information","text":"Telegram = Twitter = Tradingview = Discord = @dgnsrekt Email = dgnsrekt@pm.me","title":"Contact Information"},{"location":"changelog/","text":"requests-whaor Changelog v0.2.1 (2020-10-11) docs Updated docs and bumped version. ( f31baa0 ) fix moved temporary file location. ( 09d0cd0 ) v0.2.0 (2020-10-11) docs client: Added docstrings. ( 6c2a41d ) circuit: added docstrings and type hinting. ( 269aaec ) paths: Added docstrings. ( 4446d8b ) balancer: Added docstrings and typing. ( f80e34c ) mount: added doc strings and typing. ( c8d239d ) core: added docstring and typing. ( 599da44 ) tests: added docstrings and linting. ( 7071209 ) changed return typing. ( 4809669 ) updated and generated initial docs. ( 3c87cf1 ) updated docs added workflow. ( 3b1f3e0 ) added quickstart link to README.md and fixed index. ( 32c037e ) refactor constants: removed module. ( e557d05 ) moved image variable to each module. ( 287f007 ) init: Added docstrings, all , and version . ( 5487c46 ) chore updated dependencies. ( 85de0ce ) added keywords to pyproject.toml. ( 58fe02d ) added MANIFEST.in ( 4547fab ) test added linting and basic test. ( cbad97f ) ::> 60 commits in 2 version tags, last considered commit: 09d0cd019132f164966ce7515a52dba302ceacac","title":"Changelog"},{"location":"changelog/#requests-whaor-changelog","text":"","title":"requests-whaor Changelog"},{"location":"changelog/#v021-2020-10-11","text":"","title":"v0.2.1 (2020-10-11)"},{"location":"changelog/#docs","text":"Updated docs and bumped version. ( f31baa0 )","title":"docs"},{"location":"changelog/#fix","text":"moved temporary file location. ( 09d0cd0 )","title":"fix"},{"location":"changelog/#v020-2020-10-11","text":"","title":"v0.2.0 (2020-10-11)"},{"location":"changelog/#docs_1","text":"client: Added docstrings. ( 6c2a41d ) circuit: added docstrings and type hinting. ( 269aaec ) paths: Added docstrings. ( 4446d8b ) balancer: Added docstrings and typing. ( f80e34c ) mount: added doc strings and typing. ( c8d239d ) core: added docstring and typing. ( 599da44 ) tests: added docstrings and linting. ( 7071209 ) changed return typing. ( 4809669 ) updated and generated initial docs. ( 3c87cf1 ) updated docs added workflow. ( 3b1f3e0 ) added quickstart link to README.md and fixed index. ( 32c037e )","title":"docs"},{"location":"changelog/#refactor","text":"constants: removed module. ( e557d05 ) moved image variable to each module. ( 287f007 ) init: Added docstrings, all , and version . ( 5487c46 )","title":"refactor"},{"location":"changelog/#chore","text":"updated dependencies. ( 85de0ce ) added keywords to pyproject.toml. ( 58fe02d ) added MANIFEST.in ( 4547fab )","title":"chore"},{"location":"changelog/#test","text":"added linting and basic test. ( cbad97f ) ::> 60 commits in 2 version tags, last considered commit: 09d0cd019132f164966ce7515a52dba302ceacac","title":"test"},{"location":"quickstart/","text":"Quick Start Prerequisites Docker Engine Python ^3.8 Install with pip pip install requests-whaor Install with Poetry poetry add requests-whaor Use with the Requests library from requests_whaor import RequestsWhaor import requests URL = \"http://jsonip.com/\" with RequestsWhaor ( onion_count = 5 ) as requests_whaor : for _ in range ( 10 ): result = requests . get ( URL , proxies = requests_whaor . rotating_proxy ) print ( result . text ) Use with the requests_whaor's internal get method which retries on failure from requests_whaor import RequestsWhaor URL = \"http://jsonip.com/\" with RequestsWhaor ( onion_count = 5 , max_retries = 10 ) as requests_whaor : for _ in range ( 10 ): result = requests_whaor . get ( URL ) print ( result . text ) Note RequestsWhaor's internal .get() method will retry requests on ProxyError, Timeout, ConnectionError and bad response codes. On each retry the request will routed through a new ip address. Quickstart Output HAproxy Dashboard","title":"Quickstart"},{"location":"quickstart/#quick-start","text":"","title":"Quick Start"},{"location":"quickstart/#prerequisites","text":"Docker Engine Python ^3.8","title":"Prerequisites"},{"location":"quickstart/#install-with-pip","text":"pip install requests-whaor","title":"Install with pip"},{"location":"quickstart/#install-with-poetry","text":"poetry add requests-whaor","title":"Install with Poetry"},{"location":"quickstart/#use-with-the-requests-library","text":"from requests_whaor import RequestsWhaor import requests URL = \"http://jsonip.com/\" with RequestsWhaor ( onion_count = 5 ) as requests_whaor : for _ in range ( 10 ): result = requests . get ( URL , proxies = requests_whaor . rotating_proxy ) print ( result . text )","title":"Use with the Requests library"},{"location":"quickstart/#use-with-the-requests_whaors-internal-get-method-which-retries-on-failure","text":"from requests_whaor import RequestsWhaor URL = \"http://jsonip.com/\" with RequestsWhaor ( onion_count = 5 , max_retries = 10 ) as requests_whaor : for _ in range ( 10 ): result = requests_whaor . get ( URL ) print ( result . text ) Note RequestsWhaor's internal .get() method will retry requests on ProxyError, Timeout, ConnectionError and bad response codes. On each retry the request will routed through a new ip address.","title":"Use with the requests_whaor's internal get method which retries on failure"},{"location":"quickstart/#quickstart-output","text":"","title":"Quickstart Output"},{"location":"quickstart/#haproxy-dashboard","text":"","title":"HAproxy Dashboard"},{"location":"api/balancer-module/","text":"This module provides objects for managing the network balancer. HAProxyOptions Handles options for HAProxy docker instance. Attributes : max_connections int - Maximum per-process number of concurrent connections. timeout_client int - Maximum inactivity time on the client side. timeout_connect int - Maximum time to wait for a connection attempt to a server to succeed. timeout_queue int - Maximum time to wait in the queue for a connection slot to be free. timeout_server int - Maximum inactivity time on the server side. listen_host_port int - Frontend port to the proxy. backend_name str - Name of Backend section. dashboard_bind_port int - Port to open to reach the HAProxy dashboard. dashboard_refresh_rate int - Refresh rate of the HAProxy dashboard page. onions List[Container] - Each onion container that is connected to the whaornet. Config Pydantic Configuration. ports | def ports () -> List [ int ] Ports which will be used to expose on the local network. Balancer HAProxy Load Balancer. Attributes : haproxy_options HAProxyOptions - HAProxy options object. container_options ContainerOptions - Container options for the HA proxy instance. Config Pydantic Configuration. address | def address () -> str Return socks5 address to poxy requests through. dashboard_address | def dashboard_address () -> str Return full dashboard address. proxies | def proxies () -> Dict [ str , str ] Return proxies to mount onto a requests session. add_mount_point | def add_mount_point ( mount : MountFile ) -> None Mount a volume into the HAProxy container. Arguments : mount MountFile - File to mount between the container and local file system. display_settings | def display_settings () -> None Log config settings to stdout. OnionBalancer def OnionBalancer ( onions : List [ OnionCircuit ], show_log : bool = False ) -> Balancer Context manager which yields a started instance of an HAProxy docker container. Arguments : onions List[OnionCircuit] - List of tor containers to load balance requests across. show_log bool - If True shows the HAProxies logs on start and stop. Yields : Balancer - A started instance of a HAProxy docker container.","title":"Balancer Module"},{"location":"api/balancer-module/#haproxyoptions","text":"Handles options for HAProxy docker instance. Attributes : max_connections int - Maximum per-process number of concurrent connections. timeout_client int - Maximum inactivity time on the client side. timeout_connect int - Maximum time to wait for a connection attempt to a server to succeed. timeout_queue int - Maximum time to wait in the queue for a connection slot to be free. timeout_server int - Maximum inactivity time on the server side. listen_host_port int - Frontend port to the proxy. backend_name str - Name of Backend section. dashboard_bind_port int - Port to open to reach the HAProxy dashboard. dashboard_refresh_rate int - Refresh rate of the HAProxy dashboard page. onions List[Container] - Each onion container that is connected to the whaornet.","title":"HAProxyOptions"},{"location":"api/balancer-module/#config","text":"Pydantic Configuration.","title":"Config"},{"location":"api/balancer-module/#ports","text":"| def ports () -> List [ int ] Ports which will be used to expose on the local network.","title":"ports"},{"location":"api/balancer-module/#balancer","text":"HAProxy Load Balancer. Attributes : haproxy_options HAProxyOptions - HAProxy options object. container_options ContainerOptions - Container options for the HA proxy instance.","title":"Balancer"},{"location":"api/balancer-module/#config_1","text":"Pydantic Configuration.","title":"Config"},{"location":"api/balancer-module/#address","text":"| def address () -> str Return socks5 address to poxy requests through.","title":"address"},{"location":"api/balancer-module/#dashboard_address","text":"| def dashboard_address () -> str Return full dashboard address.","title":"dashboard_address"},{"location":"api/balancer-module/#proxies","text":"| def proxies () -> Dict [ str , str ] Return proxies to mount onto a requests session.","title":"proxies"},{"location":"api/balancer-module/#add_mount_point","text":"| def add_mount_point ( mount : MountFile ) -> None Mount a volume into the HAProxy container. Arguments : mount MountFile - File to mount between the container and local file system.","title":"add_mount_point"},{"location":"api/balancer-module/#display_settings","text":"| def display_settings () -> None Log config settings to stdout.","title":"display_settings"},{"location":"api/balancer-module/#onionbalancer","text":"def OnionBalancer ( onions : List [ OnionCircuit ], show_log : bool = False ) -> Balancer Context manager which yields a started instance of an HAProxy docker container. Arguments : onions List[OnionCircuit] - List of tor containers to load balance requests across. show_log bool - If True shows the HAProxies logs on start and stop. Yields : Balancer - A started instance of a HAProxy docker container.","title":"OnionBalancer"},{"location":"api/circuit-module/","text":"This module provides objects for managing TOR docker instances. OnionCircuit A TOR Docker Container Object. Attributes : container_options ContainerOptions - Container Options for TOR docker instance. OnionCircuits def OnionCircuits ( onion_count : int , startup_with_threads : bool = False , max_threads : int = 2 , thread_pool_timeout : Optional [ int ] = None , show_log : bool = False ) -> ContextManager [ List [ OnionCircuit ]] Context manager which yields a list of started TOR containers. Takes care of starting and stopping multiple docker container instances of TOR. Arguments : onion_count int - Number of TOR docker container instances to start. start_with_threads bool - If True uses threads to start up the containers. max_threads int - Max number of threads to use to start up the containers. thread_pool_timeout Optional[int] - Timeout for ThreadPoolExecutor. show_log bool - If True shows the containers logs. Yields : List[OnionCircuit] - A list of started OnionCircuit objects.","title":"Circuit Module"},{"location":"api/circuit-module/#onioncircuit","text":"A TOR Docker Container Object. Attributes : container_options ContainerOptions - Container Options for TOR docker instance.","title":"OnionCircuit"},{"location":"api/circuit-module/#onioncircuits","text":"def OnionCircuits ( onion_count : int , startup_with_threads : bool = False , max_threads : int = 2 , thread_pool_timeout : Optional [ int ] = None , show_log : bool = False ) -> ContextManager [ List [ OnionCircuit ]] Context manager which yields a list of started TOR containers. Takes care of starting and stopping multiple docker container instances of TOR. Arguments : onion_count int - Number of TOR docker container instances to start. start_with_threads bool - If True uses threads to start up the containers. max_threads int - Max number of threads to use to start up the containers. thread_pool_timeout Optional[int] - Timeout for ThreadPoolExecutor. show_log bool - If True shows the containers logs. Yields : List[OnionCircuit] - A list of started OnionCircuit objects.","title":"OnionCircuits"},{"location":"api/client-module/","text":"This module provides base objects to manage docker containers. Client A Docker Client. Provides the methods to connect to a docker engine. Attributes : client ClassVar[DockerClient] - A shared docker client session. get_client | def get_client ( cls ) -> DockerClient Return the docker client. Config Pydantic Configuration. ContainerOptions Docker Container Options. Provides common options needed to start a docker container. Attributes : container_timeout ClassVar[int] - Timeout in seconds to wait for the container to stop before sending a SIGKILL. image Optional[str] - Name of docker image. auto_remove bool - Enable auto-removal of the container on daemon side when the container\u2019s process exits. detach bool - Run container in the background and return a Container object. mounts List[DockerMount] - Specification for mounts to be added to the container. ports Dict[int, int] - Ports to bind inside the container. ContainerBase Docker Container Base with default options and commonly used methods. Attributes : container_options ContainerOptions - ContainerOptions Object. container Optional[Container] - Holds an instance of a initiated docker container. container_id | def container_id () -> str Return container instance id. container_short_id | def container_short_id () -> str Return container instance short id. container_name | def container_name () -> str Return container instance name. container_timeout | def container_timeout () -> int Return container timeout. show_follow_logs_command | def show_follow_logs_command () -> None Print log message with docker container logs command. expose_port | def expose_port ( port : int ) -> None Add ports to expose to the container options. Arguments : port int - The port to expose. start | def start ( show_log : bool = False ) -> None Start a container instance. Arguments : show_log bool - If True shows the containers logs. restart | def restart () -> None Restart the container instance. print_logs | def print_logs () -> None Print the container instance logs. stop | def stop ( show_log : bool = False ) -> None Stop a container instance. Arguments : show_log bool - If True shows the containers logs.","title":"Client Module"},{"location":"api/client-module/#client","text":"A Docker Client. Provides the methods to connect to a docker engine. Attributes : client ClassVar[DockerClient] - A shared docker client session.","title":"Client"},{"location":"api/client-module/#get_client","text":"| def get_client ( cls ) -> DockerClient Return the docker client.","title":"get_client"},{"location":"api/client-module/#config","text":"Pydantic Configuration.","title":"Config"},{"location":"api/client-module/#containeroptions","text":"Docker Container Options. Provides common options needed to start a docker container. Attributes : container_timeout ClassVar[int] - Timeout in seconds to wait for the container to stop before sending a SIGKILL. image Optional[str] - Name of docker image. auto_remove bool - Enable auto-removal of the container on daemon side when the container\u2019s process exits. detach bool - Run container in the background and return a Container object. mounts List[DockerMount] - Specification for mounts to be added to the container. ports Dict[int, int] - Ports to bind inside the container.","title":"ContainerOptions"},{"location":"api/client-module/#containerbase","text":"Docker Container Base with default options and commonly used methods. Attributes : container_options ContainerOptions - ContainerOptions Object. container Optional[Container] - Holds an instance of a initiated docker container.","title":"ContainerBase"},{"location":"api/client-module/#container_id","text":"| def container_id () -> str Return container instance id.","title":"container_id"},{"location":"api/client-module/#container_short_id","text":"| def container_short_id () -> str Return container instance short id.","title":"container_short_id"},{"location":"api/client-module/#container_name","text":"| def container_name () -> str Return container instance name.","title":"container_name"},{"location":"api/client-module/#container_timeout","text":"| def container_timeout () -> int Return container timeout.","title":"container_timeout"},{"location":"api/client-module/#show_follow_logs_command","text":"| def show_follow_logs_command () -> None Print log message with docker container logs command.","title":"show_follow_logs_command"},{"location":"api/client-module/#expose_port","text":"| def expose_port ( port : int ) -> None Add ports to expose to the container options. Arguments : port int - The port to expose.","title":"expose_port"},{"location":"api/client-module/#start","text":"| def start ( show_log : bool = False ) -> None Start a container instance. Arguments : show_log bool - If True shows the containers logs.","title":"start"},{"location":"api/client-module/#restart","text":"| def restart () -> None Restart the container instance.","title":"restart"},{"location":"api/client-module/#print_logs","text":"| def print_logs () -> None Print the container instance logs.","title":"print_logs"},{"location":"api/client-module/#stop","text":"| def stop ( show_log : bool = False ) -> None Stop a container instance. Arguments : show_log bool - If True shows the containers logs.","title":"stop"},{"location":"api/core-module/","text":"This module provides core requests_whaor functionality. pause def pause ( sleep : int ) -> None Sleep function with a little logging fun. Requestor Makes proxied web requests via a rotating proxy TOR network. __init__ | def __init__ ( onions : List [ OnionCircuit ], onion_balancer : Balancer , timeout : int , max_retries : int ) -> \"Requestor\" Requestor init method. Arguments : onions List[OnionCircuit] - List of TOR containers. onion_balancer Balancer - Balancer instances connected to TOR containers on the same network. timeout int - Requests timeout. max_retries int - Max number of time to retry on bad response or connection error. rotating_proxy | def rotating_proxy () -> Dict [ str , str ] Rotating proxy frontend input address. get | def get ( url : str , * args , ** kwargs ) -> Optional [ requests . models . Response ] Overload requests.get method. This will pass in the rotating proxy host address and timeout into the requests.get method. Additionally, It provides a way to automatically retry on connection failures and bad status_codes. Each time there is a failure it will try a new request with a new ip address. Arguments : url str - url to send the get request. *args - arguments to pass to requests.get() method. **kwargs - keyword arguments to pass to requests.get() method. Returns : Response - If a response is found else None. restart_onions | def restart_onions ( with_threads : bool = True , max_threads : int = 5 ) -> None Restart onion containers. This can be useful for changing ip addresses every n requests. Arguments : with_threads bool - if True uses threads to restart the containers. max_threads int - How many threads to use. RequestsWhaor def RequestsWhaor ( onion_count : int = 5 , start_with_threads : bool = True , max_threads : int = 5 , timeout : int = 5 , show_log : bool = False , max_retries : int = 5 ) -> Requestor Context manager which starts n amount of tor nodes behind a round robin reverse proxy. Arguments : onion_count int - Number of TOR circuits to spin up. start_with_threads bool - If True uses treads to spin up containers. max_threads int - Max number of threads to use when spin up containers. timeout int - Requests timeout. show_log bool - If True shows the containers logs. max_retries int - Max number of time to retry on bad response or connection error. Yields : Requestor - Makes proxied web requests via a rotating proxy TOR network.","title":"Core Module"},{"location":"api/core-module/#pause","text":"def pause ( sleep : int ) -> None Sleep function with a little logging fun.","title":"pause"},{"location":"api/core-module/#requestor","text":"Makes proxied web requests via a rotating proxy TOR network.","title":"Requestor"},{"location":"api/core-module/#__init__","text":"| def __init__ ( onions : List [ OnionCircuit ], onion_balancer : Balancer , timeout : int , max_retries : int ) -> \"Requestor\" Requestor init method. Arguments : onions List[OnionCircuit] - List of TOR containers. onion_balancer Balancer - Balancer instances connected to TOR containers on the same network. timeout int - Requests timeout. max_retries int - Max number of time to retry on bad response or connection error.","title":"__init__"},{"location":"api/core-module/#rotating_proxy","text":"| def rotating_proxy () -> Dict [ str , str ] Rotating proxy frontend input address.","title":"rotating_proxy"},{"location":"api/core-module/#get","text":"| def get ( url : str , * args , ** kwargs ) -> Optional [ requests . models . Response ] Overload requests.get method. This will pass in the rotating proxy host address and timeout into the requests.get method. Additionally, It provides a way to automatically retry on connection failures and bad status_codes. Each time there is a failure it will try a new request with a new ip address. Arguments : url str - url to send the get request. *args - arguments to pass to requests.get() method. **kwargs - keyword arguments to pass to requests.get() method. Returns : Response - If a response is found else None.","title":"get"},{"location":"api/core-module/#restart_onions","text":"| def restart_onions ( with_threads : bool = True , max_threads : int = 5 ) -> None Restart onion containers. This can be useful for changing ip addresses every n requests. Arguments : with_threads bool - if True uses threads to restart the containers. max_threads int - How many threads to use.","title":"restart_onions"},{"location":"api/core-module/#requestswhaor","text":"def RequestsWhaor ( onion_count : int = 5 , start_with_threads : bool = True , max_threads : int = 5 , timeout : int = 5 , show_log : bool = False , max_retries : int = 5 ) -> Requestor Context manager which starts n amount of tor nodes behind a round robin reverse proxy. Arguments : onion_count int - Number of TOR circuits to spin up. start_with_threads bool - If True uses treads to spin up containers. max_threads int - Max number of threads to use when spin up containers. timeout int - Requests timeout. show_log bool - If True shows the containers logs. max_retries int - Max number of time to retry on bad response or connection error. Yields : Requestor - Makes proxied web requests via a rotating proxy TOR network.","title":"RequestsWhaor"},{"location":"api/mount-module/","text":"This module provides objects for managing docker mount instances. MountFile Represents a file to be binded to a docker container. Attributes : template_name str - Name of the jinja template. target_path str - Local file system path. volume_driver str - Type of docker volume. temporary_file Optional[TemporaryFile] - A mounted instance of a TemporaryFile. mount Optional[Mount] - An instance of the DockerMount. template_variables Optional[Dict[Any, Any]] - Jinja template variables. Config Pydantic Configuration. volume_name | def volume_name () -> str Name of the volume. source_path | def source_path () -> str Temporary file path name. start | def start () -> None Start the volume mount. stop | def stop () -> None Stop the volume mount. MountPoint def MountPoint ( * , template_name : str , target_path : str , template_variables : Optional [ Dict [ Any , Any ]] = None ) -> MountFile Context manager which yields a prepared instance of a docker volume. Arguments : template_name str - Name of the jinja template. target_path str - Local file system path. template_variables Optional[Dict[Any, Any]] - Jinja template variables.","title":"Mount Module"},{"location":"api/mount-module/#mountfile","text":"Represents a file to be binded to a docker container. Attributes : template_name str - Name of the jinja template. target_path str - Local file system path. volume_driver str - Type of docker volume. temporary_file Optional[TemporaryFile] - A mounted instance of a TemporaryFile. mount Optional[Mount] - An instance of the DockerMount. template_variables Optional[Dict[Any, Any]] - Jinja template variables.","title":"MountFile"},{"location":"api/mount-module/#config","text":"Pydantic Configuration.","title":"Config"},{"location":"api/mount-module/#volume_name","text":"| def volume_name () -> str Name of the volume.","title":"volume_name"},{"location":"api/mount-module/#source_path","text":"| def source_path () -> str Temporary file path name.","title":"source_path"},{"location":"api/mount-module/#start","text":"| def start () -> None Start the volume mount.","title":"start"},{"location":"api/mount-module/#stop","text":"| def stop () -> None Stop the volume mount.","title":"stop"},{"location":"api/mount-module/#mountpoint","text":"def MountPoint ( * , template_name : str , target_path : str , template_variables : Optional [ Dict [ Any , Any ]] = None ) -> MountFile Context manager which yields a prepared instance of a docker volume. Arguments : template_name str - Name of the jinja template. target_path str - Local file system path. template_variables Optional[Dict[Any, Any]] - Jinja template variables.","title":"MountPoint"},{"location":"api/network-module/","text":"This module provides objects for managing docker network instances. Network Represents a docker network. Attributes : name str - Network name. driver str - Network driver. docker_network Optional[DockerNetwork] - Holds an instance of a started docker network. connect_container | def connect_container ( container_id : str , container_name : str ) -> None Connect container to network and give it a reachable network alias. Arguments : container_id str - The containers id. container_name str - The containers name. containers | def containers () -> List [ DockerContainer ] Return list of Container objects connected to network. network_name | def network_name () -> str Network name. network_id | def network_id () -> str Network short id. start | def start () -> None Start Docker network. stop | def stop () -> None Stop Docker network. WhaorNet def WhaorNet ( name : str = \"whaornet\" , driver : str = \"bridge\" ) -> ContextManager [ Network ] Context manager which yields a network to connect containers to. Arguments : name str - Name of network. driver str - Type of network drivier. Yields : Network - A Docker network.","title":"Network Module"},{"location":"api/network-module/#network","text":"Represents a docker network. Attributes : name str - Network name. driver str - Network driver. docker_network Optional[DockerNetwork] - Holds an instance of a started docker network.","title":"Network"},{"location":"api/network-module/#connect_container","text":"| def connect_container ( container_id : str , container_name : str ) -> None Connect container to network and give it a reachable network alias. Arguments : container_id str - The containers id. container_name str - The containers name.","title":"connect_container"},{"location":"api/network-module/#containers","text":"| def containers () -> List [ DockerContainer ] Return list of Container objects connected to network.","title":"containers"},{"location":"api/network-module/#network_name","text":"| def network_name () -> str Network name.","title":"network_name"},{"location":"api/network-module/#network_id","text":"| def network_id () -> str Network short id.","title":"network_id"},{"location":"api/network-module/#start","text":"| def start () -> None Start Docker network.","title":"start"},{"location":"api/network-module/#stop","text":"| def stop () -> None Stop Docker network.","title":"stop"},{"location":"api/network-module/#whaornet","text":"def WhaorNet ( name : str = \"whaornet\" , driver : str = \"bridge\" ) -> ContextManager [ Network ] Context manager which yields a network to connect containers to. Arguments : name str - Name of network. driver str - Type of network drivier. Yields : Network - A Docker network.","title":"WhaorNet"},{"location":"api/paths-module/","text":"Module for commonly used paths. SOURCE_ROOT_PATH A path to the source code directory. PROJECT_ROOT_PATH A path to the project root directory. TEST_PATH A path to the test directory. TEMPLATE_DIRECTORY A path to the templates directory. TEMPORARY_FILES_DIRECTORY A path to the temporary files directory.","title":"Paths Module"},{"location":"api/paths-module/#source_root_path","text":"A path to the source code directory.","title":"SOURCE_ROOT_PATH"},{"location":"api/paths-module/#project_root_path","text":"A path to the project root directory.","title":"PROJECT_ROOT_PATH"},{"location":"api/paths-module/#test_path","text":"A path to the test directory.","title":"TEST_PATH"},{"location":"api/paths-module/#template_directory","text":"A path to the templates directory.","title":"TEMPLATE_DIRECTORY"},{"location":"api/paths-module/#temporary_files_directory","text":"A path to the temporary files directory.","title":"TEMPORARY_FILES_DIRECTORY"},{"location":"examples/basics/","text":"Basic Usage How to start a whaor network and make some requests. from requests_whaor import RequestsWhaor URL = \"http://jsonip.com/\" with RequestsWhaor ( onion_count = 5 ) as requests_whaor : for _ in range ( 10 ): resp = requests_whaor . get ( URL ) if resp : print ( resp . text ) Example of passing the rotating_proxy to a session object. from requests_whaor import RequestsWhaor from requests.sessions import Session URL = \"http://jsonip.com/\" session = Session () with RequestsWhaor ( onion_count = 5 ) as requests_whaor : for _ in range ( 10 ): result = session . get ( URL , proxies = requests_whaor . rotating_proxy ) print ( result . text ) Example of making 30 requests while getting a fresh pool of ip addresses every 10 requests. from requests_whaor import RequestsWhaor URL = \"http://jsonip.com/\" with RequestsWhaor ( onion_count = 5 ) as requests_whaor : for _ in range ( 3 ): for _ in range ( 10 ): resp = requests_whaor . get ( URL ) if resp : print ( resp . text ) requests_whaor . restart_onions ()","title":"Basics"},{"location":"examples/basics/#basic-usage","text":"","title":"Basic Usage"},{"location":"examples/basics/#how-to-start-a-whaor-network-and-make-some-requests","text":"from requests_whaor import RequestsWhaor URL = \"http://jsonip.com/\" with RequestsWhaor ( onion_count = 5 ) as requests_whaor : for _ in range ( 10 ): resp = requests_whaor . get ( URL ) if resp : print ( resp . text )","title":"How to start a whaor network and make some requests."},{"location":"examples/basics/#example-of-passing-the-rotating_proxy-to-a-session-object","text":"from requests_whaor import RequestsWhaor from requests.sessions import Session URL = \"http://jsonip.com/\" session = Session () with RequestsWhaor ( onion_count = 5 ) as requests_whaor : for _ in range ( 10 ): result = session . get ( URL , proxies = requests_whaor . rotating_proxy ) print ( result . text )","title":"Example of passing the rotating_proxy to a session object."},{"location":"examples/basics/#example-of-making-30-requests-while-getting-a-fresh-pool-of-ip-addresses-every-10-requests","text":"from requests_whaor import RequestsWhaor URL = \"http://jsonip.com/\" with RequestsWhaor ( onion_count = 5 ) as requests_whaor : for _ in range ( 3 ): for _ in range ( 10 ): resp = requests_whaor . get ( URL ) if resp : print ( resp . text ) requests_whaor . restart_onions ()","title":"Example of making 30 requests while getting a fresh pool of ip addresses every 10 requests."},{"location":"examples/call-options-watchlist/","text":"How to build a one delta OTM call options watchlist from twitter cashtags. Overview First, we will scrape a users tweets for cashtags with nitter_scraper Next, we will prepare and clean the tweet data to build a watchlist. After that, we will startup a network of tor nodes behind a reverse proxy, to bypass the yahoo finance rate limit, using requests-whaor Last, we will download, clean, and concatenate all the options data into a single DataFrame. Requirements Docker Engine installed. python ^3.8 poetry Dependencies yfs nitter_scraper requests-whaor Note requests-whaor will create multiple TOR nodes enclosed in docker containers to proxy your requests. Environment Preparation Run the following commands to build a folder and initiate a poetry project. $ mkdir yfs_watchlist $ cd yfs_watchlist $ poetry init Keep hitting the enter button until you are out of the poetry init prompt. Now lets add the dependencies. $ poetry add nitter-scraper $ poetry add requests-whaor $ poetry add yfs Create options_bot.py $ touch options_bot.py Open options_bot.py in your favorite editor. Imports from concurrent.futures import as_completed , ThreadPoolExecutor The ThreadPoolExecutor is used to call fuzzy_search and get_options_page functions asynchronously with a pool of threads. from nitter_scraper import NitterScraper The nitter_scraper library is used to scrape tweets. import pandas The pandas library is used to clean and concatenate the DataFrames. from requests_whaor import RequestsWhaor The requests_whaor library will supply a rotating proxy server to send our requests through, giving each request a unique IP address. If a request times out or gets a error code from the server it will retry with another IP address. from yfs import fuzzy_search , get_options_page Last we use these yfs functions to search for valid symbols and get options data. from concurrent.futures import as_completed , ThreadPoolExecutor from nitter_scraper import NitterScraper import pandas from requests_whaor import RequestsWhaor from yfs import fuzzy_search , get_options_page The imports should look like this. Scrape Twitter and build a watchlist watchlist = [] # Lets scrape the first page of eWhispers twitter feed for a list of symbols. with NitterScraper ( port = 8008 ) as nitter : for tweet in nitter . get_tweets ( \"eWhispers\" , pages = 1 ): if tweet . is_pinned : # Lets skip the pinned tweet. continue if tweet . is_retweet : # Lets skip any retweets. continue if tweet . entries . cashtags : # Lets check if cashtags exists in the tweet then add them to the watchlist. watchlist += tweet . entries . cashtags print ( \".\" , end = \"\" , flush = True ) # Quick little progress bar so we don't get bored. print () # Print a new line when complete just to make things look a little cleaner. watchlist = sorted ( set ( map ( lambda cashtag : cashtag . replace ( \"$\" , \"\" ) . strip (), watchlist ))) # Lets sort, remove duplicates, and clean '$' strings from each symbol. Now we have a dynamically generated list of potentially interesting stock symbols. valid_symbols = [] # Used to store symbols validated with the fuzzy_search function. call_chains = [] # Used to store all the found call option chains. # Decide on how many threads and proxies your computer can handle MAX_THREADS = 6 # Each proxy is a tor circuit running inside a separate docker container. MAX_PROXIES = 6 Now on to the meat of the code. with RequestsWhaor ( onion_count = MAX_PROXIES , max_threads = MAX_THREADS ) as request_whaor : # RequestsWhaor will spin up a network of TOR nodes we will use as a rotating proxy. with ThreadPoolExecutor ( max_workers = MAX_THREADS ) as executor : futures = [ executor . submit ( fuzzy_search , ticker , session = request_whaor ) # ^--Here we pass request_whaor as a session like object for yfs fuzzy_search. for ticker in watchlist ] for future in as_completed ( futures ): result = future . result ( timeout = 60 ) print ( \".\" , end = \"\" , flush = True ) # Quick progress bar. if result : # Now we append the results to the valid_symbols list. valid_symbols . append ( result ) # Lets get the raw symbol from each ValidSymbol object. valid_symbols = [ ticker . symbol for ticker in valid_symbols ] print ( \"found\" , len ( valid_symbols )) # Number of valid symbols found. request_whaor . restart_onions () # Lets get a fresh pool of proxies before the next step. futures = [ executor . submit ( get_options_page , ticker , after_days = 60 , # Lets get options that have at least 60 days before expiring. first_chain = True , # We only want the first expiration with all strike prices. use_fuzzy_search = False , # We did fuzzy search already no need to do it again. session = request_whaor , # pass request_whaor as a session like object to yfs. page_not_found_ok = True , # return None if the symbol doesn't have an option page. timeout = 5 , # Pass a 5 second timeout to the session. ) for ticker in valid_symbols ] for future in as_completed ( futures ): try : result = future . result ( timeout = 120 ) print ( \".\" , end = \"\" , flush = True ) # Progress bar. if result : if result . calls : # If the results have a call option chain we will append it to the list. call_chains . append ( result . calls ) except Exception as exc : # We will pass on any exceptions. print ( exc ) Note ThreadPoolExecutor information here. Final Section First, iterate over the result. Then, convert each chain into a dataframe. Next, get the first out of the money option and append it to a list. After that, concatenate the list of single option contract dataframes into a single dataframe. Now lets, drop some columns and sort by implied volatility to make things look pretty. Finally, print the results. first_otm_strike = [] for chain in call_chains : df = chain . dataframe otm = df [ df [ \"in_the_money\" ] == False ] . head ( 1 ) if otm is not None : first_otm_strike . append ( otm ) final = pandas . concat ( first_otm_strike , ignore_index = True ) final . drop ( columns = [ \"timestamp\" , \"contract_name\" ], inplace = True ) final . sort_values ( by = \"implied_volatility\" , inplace = True ) final . reset_index ( inplace = True ) print ( final . to_string ()) Now we have a single dataframe of one delta OTM call options built from a dynamically generated watch list. Output index symbol contract_type expiration_date in_the_money strike last_price bid ask change percent_change volume open_interest implied_volatility 0 122 SNX call 2020 -12-18 00 :00:00+00:00 False 155 .0 5 .92 0 .00 0 .00 0 .00 NaN 7 19 .0 1 .56 1 10 AZZ call 2021 -02-19 00 :00:00+00:00 False 40 .0 2 .00 0 .00 0 .00 0 .00 None 1 0 .0 3 .13 2 133 USAT call 2021 -01-15 00 :00:00+00:00 False 10 .0 1 .25 0 .00 0 .00 0 .00 None 2 41 .0 12 .50 3 116 SINA call 2020 -12-18 00 :00:00+00:00 False 45 .0 0 .05 0 .05 0 .50 0 .00 NaN 5 59 .0 18 .36 4 71 JNJ call 2020 -12-18 00 :00:00+00:00 False 155 .0 3 .75 3 .70 3 .80 0 .55 17 .19 150 3168 .0 21 .05 5 94 PEP call 2020 -12-18 00 :00:00+00:00 False 140 .0 4 .26 4 .15 4 .45 0 .10 2 .4 38 4826 .0 21 .51 6 31 COST call 2021 -01-15 00 :00:00+00:00 False 370 .0 18 .60 18 .50 18 .95 1 .46 8 .52 90 1326 .0 25 .29 7 55 GIS call 2021 -01-15 00 :00:00+00:00 False 62 .5 2 .99 2 .57 2 .99 0 .39 15 7 1501 .0 25 .78 8 59 INFO call 2020 -12-18 00 :00:00+00:00 False 80 .0 3 .46 2 .65 3 .10 0 .00 None 1 314 .0 27 .06 9 95 PGR call 2021 -01-15 00 :00:00+00:00 False 100 .0 5 .15 5 .00 5 .60 0 .65 14 .44 29 613 .0 27 .55 10 81 MKC call 2020 -12-18 00 :00:00+00:00 False 200 .0 7 .50 7 .10 7 .70 0 .50 7 .14 6 188 .0 27 .72 11 0 ACN call 2021 -01-15 00 :00:00+00:00 False 230 .0 12 .50 12 .40 13 .20 1 .50 13 .64 63 596 .0 29 .38 12 27 CAG call 2020 -12-18 00 :00:00+00:00 False 38 .0 1 .54 1 .40 1 .60 -0.06 -3.75 2 523 .0 29 .42 13 97 PAYX call 2020 -12-18 00 :00:00+00:00 False 82 .5 3 .80 3 .80 4 .20 0 .00 NaN 4 1391 .0 29 .74 14 93 ORCL call 2020 -12-18 00 :00:00+00:00 False 62 .5 2 .53 2 .47 2 .60 0 .08 3 .27 27 9815 .0 30 .14 15 139 WABC call 2021 -01-15 00 :00:00+00:00 False 65 .0 0 .80 0 .75 1 .05 0 .00 None 2 22 .0 30 .74 16 22 BLK call 2021 -01-15 00 :00:00+00:00 False 620 .0 32 .10 28 .00 36 .20 1 .75 5 .77 46 140 .0 31 .83 17 88 NKE call 2021 -01-15 00 :00:00+00:00 False 135 .0 6 .85 6 .70 6 .85 0 .35 5 .38 92 2130 .0 31 .89 18 74 KSU call 2020 -12-18 00 :00:00+00:00 False 190 .0 8 .40 6 .20 9 .00 0 .78 10 .24 1 57 .0 32 .46 19 21 BK call 2020 -12-18 00 :00:00+00:00 False 40 .0 1 .20 1 .10 1 .25 0 .15 14 .29 150 2705 .0 32 .86 20 50 FRC call 2021 -02-19 00 :00:00+00:00 False 125 .0 1 .66 8 .40 9 .20 0 .00 NaN 1 4 .0 32 .98 21 144 WNS call 2021 -01-15 00 :00:00+00:00 False 75 .0 1 .15 1 .45 1 .90 0 .00 None 48 103 .0 33 .03 22 41 DPZ call 2020 -12-18 00 :00:00+00:00 False 400 .0 18 .00 15 .00 18 .90 -7.10 -28.29 147 265 .0 33 .77 23 28 CASY call 2021 -02-19 00 :00:00+00:00 False 185 .0 10 .90 10 .50 14 .20 0 .00 None NaN 8 .0 34 .07 24 102 PNC call 2021 -01-15 00 :00:00+00:00 False 120 .0 6 .30 5 .70 6 .20 -0.60 -8.7 21 451 .0 34 .17 25 111 RPM call 2021 -02-19 00 :00:00+00:00 False 90 .0 5 .40 4 .00 6 .00 0 .00 NaN 2 178 .0 34 .38 26 47 FDS call 2020 -12-18 00 :00:00+00:00 False 330 .0 16 .01 14 .50 18 .50 0 .00 None 1 38 .0 34 .64 27 61 JBHT call 2021 -01-15 00 :00:00+00:00 False 140 .0 6 .50 6 .20 7 .60 -0.40 -5.8 2 51 .0 34 .69 28 52 GS call 2021 -01-15 00 :00:00+00:00 False 210 .0 13 .50 13 .40 13 .70 -0.89 -6.18 236 3466 .0 34 .74 29 44 FAST call 2021 -01-15 00 :00:00+00:00 False 47 .5 2 .75 2 .60 2 .95 0 .10 3 .77 5 293 .0 34 .83 30 135 UNH call 2020 -12-18 00 :00:00+00:00 False 330 .0 17 .84 15 .75 18 .80 3 .24 22 .19 100 1289 .0 34 .84 31 121 STZ call 2021 -01-15 00 :00:00+00:00 False 190 .0 10 .30 10 .10 11 .90 0 .50 5 .1 41 744 .0 34 .92 32 19 AZO call 2020 -12-18 00 :00:00+00:00 False 1140 .0 72 .00 60 .90 68 .50 0 .00 NaN 1 5 .0 35 .27 33 101 PRGS call 2020 -12-18 00 :00:00+00:00 False 45 .0 0 .67 0 .60 0 .90 0 .00 NaN 6 399 .0 35 .60 34 69 JPM call 2020 -12-18 00 :00:00+00:00 False 105 .0 4 .55 4 .50 4 .65 -0.63 -12.16 280 12567 .0 35 .66 35 65 INFY call 2021 -01-15 00 :00:00+00:00 False 16 .0 0 .75 0 .70 0 .80 0 .15 25 31 328 .0 36 .08 36 84 MS call 2020 -12-18 00 :00:00+00:00 False 50 .0 2 .52 2 .53 2 .58 -0.21 -7.69 2415 1027 .0 36 .55 37 39 CTAS call 2020 -12-18 00 :00:00+00:00 False 340 .0 19 .75 17 .10 21 .50 0 .00 NaN 2 14 .0 36 .91 38 54 HDS call 2020 -12-18 00 :00:00+00:00 False 45 .0 1 .80 1 .65 1 .90 0 .20 12 .5 3 176 .0 37 .23 39 13 BAC call 2020 -12-18 00 :00:00+00:00 False 26 .0 1 .31 1 .31 1 .37 -0.05 -3.68 937 20691 .0 37 .55 40 33 CALM call 2020 -12-18 00 :00:00+00:00 False 40 .0 1 .50 1 .40 1 .70 -0.40 -21.05 20 49 .0 38 .09 41 7 ASML call 2021 -01-15 00 :00:00+00:00 False 390 .0 28 .40 27 .40 30 .00 4 .50 18 .83 3 479 .0 38 .13 42 114 SCHW call 2020 -12-18 00 :00:00+00:00 False 39 .0 1 .89 1 .98 2 .19 -0.01 -0.53 39 373 .0 38 .21 43 16 C call 2020 -12-18 00 :00:00+00:00 False 45 .0 2 .95 2 .91 2 .97 -0.10 -3.28 165 10174 .0 38 .57 44 60 ISRG call 2020 -12-18 00 :00:00+00:00 False 740 .0 48 .00 43 .70 50 .40 13 .60 39 .53 5 217 .0 40 .06 45 129 TFC call 2020 -12-18 00 :00:00+00:00 False 45 .0 1 .97 1 .95 2 .25 -0.09 -4.37 2 3577 .0 40 .09 46 56 HELE call 2020 -12-18 00 :00:00+00:00 False 200 .0 7 .93 9 .80 12 .90 0 .00 NaN 2 12 .0 40 .09 47 75 LNDC call 2020 -12-18 00 :00:00+00:00 False 12 .5 0 .10 0 .05 0 .10 -0.05 -33.33 1 56 .0 40 .23 48 137 VFC call 2021 -01-15 00 :00:00+00:00 False 80 .0 4 .80 4 .90 5 .40 0 .00 NaN 7 160 .0 40 .33 49 79 LW call 2021 -01-15 00 :00:00+00:00 False 75 .0 5 .40 4 .80 5 .30 -0.60 -10 1 251 .0 40 .44 50 123 STT call 2021 -01-15 00 :00:00+00:00 False 67 .5 4 .70 4 .70 5 .10 1 .80 62 .07 2 145 .0 40 .87 51 134 USB call 2020 -12-18 00 :00:00+00:00 False 40 .0 2 .42 2 .19 2 .41 -0.19 -7.28 59 3619 .0 40 .92 52 1 ABM call 2021 -01-15 00 :00:00+00:00 False 40 .0 2 .11 1 .60 2 .00 0 .00 None 1 90 .0 41 .53 53 48 FDX call 2021 -01-15 00 :00:00+00:00 False 280 .0 19 .34 18 .95 19 .55 -0.96 -4.73 152 2159 .0 41 .57 54 9 AYI call 2020 -12-18 00 :00:00+00:00 False 100 .0 7 .90 5 .80 7 .10 -8.45 -51.68 125 24 .0 42 .15 55 36 CMC call 2020 -12-18 00 :00:00+00:00 False 23 .0 1 .50 1 .35 1 .50 0 .10 7 .14 24 1212 .0 42 .33 56 107 RGP call 2021 -02-19 00 :00:00+00:00 False 12 .5 0 .75 0 .65 0 .85 0 .75 None 56 347 .0 42 .53 57 8 ADBE call 2020 -12-18 00 :00:00+00:00 False 505 .0 33 .63 34 .30 35 .90 3 .82 12 .81 30 1044 .0 42 .76 58 125 TCOM call 2020 -12-18 00 :00:00+00:00 False 33 .0 2 .10 1 .80 2 .03 0 .00 NaN 54 2102 .0 42 .92 59 142 WFC call 2020 -12-18 00 :00:00+00:00 False 27 .5 1 .02 1 .01 1 .07 -0.04 -3.77 550 31241 .0 43 .31 60 130 TSM call 2020 -12-18 00 :00:00+00:00 False 90 .0 6 .15 6 .00 6 .20 0 .45 7 .89 406 1115 .0 43 .87 61 82 MTN call 2020 -12-18 00 :00:00+00:00 False 250 .0 9 .00 11 .10 14 .90 0 .00 NaN 1 45 .0 44 .12 62 138 VRNT call 2020 -12-18 00 :00:00+00:00 False 55 .0 2 .80 2 .95 3 .30 0 .30 12 2 3136 .0 44 .12 63 141 WBA call 2020 -12-18 00 :00:00+00:00 False 37 .5 2 .01 1 .58 2 .33 -0.18 -8.22 1 370 .0 44 .92 64 42 EDU call 2021 -01-15 00 :00:00+00:00 False 175 .0 7 .18 12 .60 13 .60 0 .00 NaN 1 15 .0 45 .00 65 72 LEN call 2021 -01-15 00 :00:00+00:00 False 85 .0 7 .30 7 .20 7 .40 -0.20 -2.67 22 832 .0 45 .29 66 66 JBL call 2020 -12-18 00 :00:00+00:00 False 37 .0 2 .45 2 .20 2 .65 0 .35 16 .67 1 12 .0 46 .51 67 43 EPAC call 2021 -02-19 00 :00:00+00:00 False 20 .0 1 .55 1 .25 2 .05 0 .00 None 153 289 .0 46 .63 68 35 CVGW call 2021 -01-15 00 :00:00+00:00 False 70 .0 4 .00 3 .90 6 .00 0 .00 None NaN 4 .0 46 .89 69 68 KMX call 2021 -01-15 00 :00:00+00:00 False 95 .0 8 .00 7 .90 9 .20 -0.90 -10.11 17 944 .0 47 .31 70 85 MU call 2020 -12-18 00 :00:00+00:00 False 50 .0 4 .00 4 .00 4 .10 4 .00 None 444 994 .0 48 .05 71 80 LULU call 2020 -12-18 00 :00:00+00:00 False 350 .0 26 .80 26 .80 27 .25 3 .35 14 .29 123 480 .0 48 .07 72 40 DRI call 2021 -01-15 00 :00:00+00:00 False 105 .0 8 .80 8 .20 8 .80 0 .44 5 .26 3 857 .0 48 .21 73 57 HOMB call 2020 -12-18 00 :00:00+00:00 False 17 .5 0 .90 0 .70 1 .20 0 .00 None 55 187 .0 49 .22 74 11 APOG call 2021 -02-19 00 :00:00+00:00 False 30 .0 1 .35 1 .40 1 .50 0 .22 19 .47 2 204 .0 49 .71 75 73 LEVI call 2021 -01-15 00 :00:00+00:00 False 16 .0 1 .20 1 .20 1 .25 -0.25 -17.24 100 1362 .0 50 .44 76 140 WB call 2021 -01-15 00 :00:00+00:00 False 45 .0 2 .88 2 .55 3 .10 -0.02 -0.69 16 1531 .0 50 .46 77 143 WOR call 2020 -12-18 00 :00:00+00:00 False 50 .0 3 .13 2 .15 3 .30 0 .23 7 .93 7 359 .0 50 .76 78 67 KBH call 2021 -01-15 00 :00:00+00:00 False 45 .0 2 .80 2 .60 2 .80 0 .44 18 .64 17 271 .0 50 .98 79 26 ALLY call 2020 -12-18 00 :00:00+00:00 False 28 .0 2 .57 2 .20 2 .59 0 .15 6 .2 35 1403 .0 51 .07 80 99 PHR call 2021 -01-15 00 :00:00+00:00 False 35 .0 2 .50 1 .85 2 .60 0 .30 13 .64 1 49 .0 51 .51 81 17 AVAV call 2020 -12-18 00 :00:00+00:00 False 75 .0 5 .00 4 .40 5 .20 0 .71 16 .55 4 104 .0 51 .79 82 18 BB call 2020 -12-18 00 :00:00+00:00 False 5 .0 0 .31 0 .30 0 .33 0 .01 3 .33 18 1416 .0 51 .95 83 34 CMD call 2020 -12-18 00 :00:00+00:00 False 50 .0 2 .65 2 .75 3 .70 0 .00 NaN 3 3 .0 52 .47 84 90 NEOG call 2021 -01-15 00 :00:00+00:00 False 80 .0 7 .00 2 .50 7 .50 0 .00 None 2 15 .0 54 .53 85 146 ZS call 2021 -01-15 00 :00:00+00:00 False 155 .0 15 .85 14 .75 16 .65 1 .45 10 .07 115 1113 .0 54 .60 86 109 SCHL call 2020 -12-18 00 :00:00+00:00 False 22 .5 1 .45 1 .20 1 .70 0 .00 NaN 5 13 .0 54 .79 87 6 ANGO call 2021 -01-15 00 :00:00+00:00 False 12 .5 1 .02 0 .70 1 .25 0 .00 NaN 3 36 .0 55 .47 88 49 FUL call 2021 -02-19 00 :00:00+00:00 False 50 .0 4 .20 2 .75 6 .30 0 .00 None 1 126 .0 55 .47 89 30 CBRL call 2020 -12-18 00 :00:00+00:00 False 120 .0 8 .60 7 .70 10 .60 0 .00 None 2 141 .0 55 .54 90 120 SLB call 2020 -12-18 00 :00:00+00:00 False 17 .5 1 .07 1 .03 1 .11 1 .07 None 8 58 .0 55 .76 91 147 ZUMZ call 2021 -02-19 00 :00:00+00:00 False 35 .0 2 .66 2 .65 3 .00 0 .00 NaN 2 37 .0 56 .10 92 24 CAMP call 2020 -12-18 00 :00:00+00:00 False 10 .0 0 .20 0 .00 0 .40 0 .00 None 10 570 .0 56 .25 93 98 OSH call 2021 -04-16 00 :00:00+00:00 False 65 .0 4 .76 2 .50 6 .30 4 .76 None 100 101 .0 56 .38 94 64 HQY call 2020 -12-18 00 :00:00+00:00 False 60 .0 3 .50 3 .40 3 .70 0 .00 NaN 1 584 .0 56 .49 95 32 COUP call 2020 -12-18 00 :00:00+00:00 False 310 .0 29 .00 27 .30 28 .60 5 .33 22 .52 7 78 .0 57 .75 96 77 LMNR call 2020 -12-18 00 :00:00+00:00 False 15 .0 1 .25 1 .05 1 .95 0 .00 None 2 2 .0 58 .20 97 127 THO call 2020 -12-18 00 :00:00+00:00 False 97 .5 9 .00 9 .20 9 .70 -6.20 -40.79 11 27 .0 58 .96 98 110 RH call 2021 -01-15 00 :00:00+00:00 False 380 .0 44 .15 41 .60 43 .30 -0.07 -0.16 8 412 .0 60 .54 99 89 NG call 2020 -12-18 00 :00:00+00:00 False 12 .0 0 .77 0 .85 1 .05 0 .00 NaN 20 1163 .0 60 .64 100 37 CMTL call 2021 -01-15 00 :00:00+00:00 False 17 .5 1 .75 1 .55 1 .70 0 .55 45 .83 1 312 .0 60 .94 101 5 AEO call 2021 -01-15 00 :00:00+00:00 False 16 .0 1 .70 1 .55 1 .80 -0.20 -10.53 20 270 .0 62 .40 102 112 SCWX call 2021 -01-15 00 :00:00+00:00 False 12 .5 1 .00 1 .15 1 .30 0 .00 None 61 148 .0 62 .70 103 103 RFIL call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .35 0 .30 0 .50 0 .00 None 9 122 .0 63 .67 104 148 WORK call 2020 -12-18 00 :00:00+00:00 False 32 .0 3 .00 2 .95 3 .05 0 .51 20 .48 608 8478 .0 63 .84 105 4 AA call 2020 -12-18 00 :00:00+00:00 False 13 .0 1 .26 1 .16 1 .24 0 .00 NaN 6 145 .0 64 .70 106 29 CHWY call 2021 -01-15 00 :00:00+00:00 False 65 .0 6 .90 6 .80 6 .95 1 .31 23 .43 449 3579 .0 65 .43 107 119 SLQT call 2021 -01-15 00 :00:00+00:00 False 20 .0 2 .40 2 .35 2 .60 -0.20 -7.69 12 361 .0 65 .63 108 38 DAL call 2020 -12-18 00 :00:00+00:00 False 33 .0 3 .65 3 .55 3 .80 0 .00 NaN 19 1220 .0 66 .26 109 126 SNBR call 2020 -12-18 00 :00:00+00:00 False 60 .0 3 .50 4 .20 5 .10 0 .00 NaN 5 129 .0 66 .75 110 117 SGH call 2020 -12-18 00 :00:00+00:00 False 30 .0 1 .00 0 .50 2 .25 -0.05 -4.76 1 79 .0 68 .07 111 131 UEPS call 2021 -01-15 00 :00:00+00:00 False 4 .0 0 .38 0 .15 0 .40 0 .00 None 63 326 .0 68 .36 112 87 NAV call 2020 -12-18 00 :00:00+00:00 False 46 .0 2 .70 0 .20 5 .00 2 .70 None 3 0 .0 70 .92 113 86 NCNO call 2021 -02-19 00 :00:00+00:00 False 80 .0 13 .54 13 .00 13 .90 0 .84 6 .61 8 52 .0 71 .03 114 124 TACO call 2020 -12-18 00 :00:00+00:00 False 10 .0 0 .94 0 .80 1 .05 0 .09 10 .59 14 893 .0 71 .09 115 132 UNFI call 2021 -02-19 00 :00:00+00:00 False 17 .5 2 .75 2 .50 3 .00 0 .05 1 .85 58 550 .0 72 .07 116 78 MCFT call 2021 -01-15 00 :00:00+00:00 False 20 .0 2 .95 2 .55 3 .40 0 .00 NaN 1 16 .0 72 .75 117 115 SFIX call 2020 -12-18 00 :00:00+00:00 False 32 .0 3 .39 3 .65 3 .85 -0.20 -5.57 24 277 .0 73 .05 118 62 HMY call 2021 -01-15 00 :00:00+00:00 False 6 .0 0 .90 0 .75 1 .00 0 .20 28 .57 24 1835 .0 73 .24 119 104 REVG call 2021 -01-15 00 :00:00+00:00 False 10 .0 0 .50 0 .45 1 .20 0 .00 None 5 43 .0 73 .44 120 100 PTON call 2021 -01-15 00 :00:00+00:00 False 125 .0 19 .00 17 .50 19 .00 3 .87 25 .58 198 1423 .0 75 .85 121 14 BBBY call 2020 -12-18 00 :00:00+00:00 False 22 .0 2 .67 2 .59 2 .69 -0.26 -8.87 12 549 .0 77 .34 122 145 VITL call 2021 -01-15 00 :00:00+00:00 False 40 .0 7 .00 5 .30 6 .90 0 .00 NaN 3 10 .0 77 .73 123 136 UAL call 2020 -12-18 00 :00:00+00:00 False 38 .0 4 .70 4 .60 4 .70 0 .40 9 .3 42 1094 .0 78 .32 124 12 APHA call 2021 -01-15 00 :00:00+00:00 False 6 .0 0 .82 0 .80 0 .85 -0.07 -7.87 150 5032 .0 78 .71 125 70 LAKE call 2021 -01-15 00 :00:00+00:00 False 25 .0 2 .85 2 .75 3 .10 0 .60 26 .67 68 972 .0 79 .88 126 128 TNP call 2020 -12-18 00 :00:00+00:00 False 10 .0 0 .50 0 .45 0 .60 -0.13 -20.63 61 267 .0 80 .47 127 105 RAD call 2021 -01-15 00 :00:00+00:00 False 11 .0 1 .30 1 .09 1 .53 -0.09 -6.47 45 367 .0 80 .76 128 45 EPM call 2021 -01-15 00 :00:00+00:00 False 2 .5 0 .30 0 .05 0 .50 0 .10 50 2 71 .0 85 .16 129 23 BRC call 2021 -05-21 00 :00:00+00:00 False 45 .0 3 .40 0 .20 10 .00 0 .00 None None 32 .0 86 .30 130 51 GIII call 2020 -12-18 00 :00:00+00:00 False 17 .5 1 .45 1 .45 1 .70 0 .00 NaN 9 492 .0 87 .74 131 25 CCL call 2021 -01-15 00 :00:00+00:00 False 17 .5 2 .21 2 .10 2 .21 0 .09 4 .25 7323 25364 .0 87 .94 132 46 FLR call 2021 -01-15 00 :00:00+00:00 False 12 .5 1 .46 1 .35 1 .50 -0.03 -2.01 327 4591 .0 89 .06 133 76 LOVE call 2021 -01-15 00 :00:00+00:00 False 35 .0 6 .17 5 .40 6 .20 1 .17 23 .4 8 72 .0 89 .40 134 3 AGTC call 2021 -01-15 00 :00:00+00:00 False 7 .5 0 .50 0 .35 0 .65 0 .00 None 11 2942 .0 93 .95 135 91 MRTN call 2020 -12-18 00 :00:00+00:00 False 17 .5 1 .75 0 .00 2 .90 0 .00 None NaN 2 .0 98 .39 136 63 JKS call 2020 -12-18 00 :00:00+00:00 False 65 .0 10 .00 8 .70 11 .00 3 .80 61 .29 120 277 .0 99 .05 137 96 PLAY call 2021 -01-15 00 :00:00+00:00 False 17 .5 2 .85 2 .65 2 .90 0 .05 1 .79 106 1772 .0 100 .44 138 20 BIGC call 2021 -01-15 00 :00:00+00:00 False 100 .0 19 .24 19 .00 19 .35 2 .88 17 .6 70 1036 .0 100 .83 139 92 NTWK call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .10 0 .00 0 .30 0 .00 NaN 5 68 .0 103 .52 140 108 RLGT call 2020 -12-18 00 :00:00+00:00 False 7 .5 0 .10 0 .00 0 .80 0 .00 None 2 17 .0 112 .50 141 58 ICMB call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .20 0 .00 0 .50 0 .00 None 30 126 .0 117 .19 142 113 SANW call 2021 -02-19 00 :00:00+00:00 False 2 .5 1 .11 0 .00 1 .25 0 .00 None 12 6 .0 122 .66 143 2 ACB call 2020 -12-18 00 :00:00+00:00 False 6 .0 0 .75 0 .62 0 .88 0 .00 NaN 255 1199 .0 124 .22 144 83 MEIP call 2020 -12-18 00 :00:00+00:00 False 5 .0 0 .20 0 .20 0 .25 0 .00 None 6 12699 .0 127 .73 145 106 QTT call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .25 0 .10 0 .35 0 .10 66 .67 3 285 .0 132 .42 146 53 GME call 2020 -12-18 00 :00:00+00:00 False 13 .0 2 .49 2 .45 2 .76 2 .49 None 101 27 .0 143 .85 147 118 SEAC call 2021 -01-15 00 :00:00+00:00 False 2 .5 0 .05 0 .00 0 .15 0 .00 None 1 1805 .0 169 .53 148 15 BCLI call 2020 -12-18 00 :00:00+00:00 False 20 .0 7 .00 6 .60 7 .50 0 .04 0 .57 37 764 .0 266 .89 Full Script from concurrent.futures import as_completed , ThreadPoolExecutor from nitter_scraper import NitterScraper import pandas from requests_whaor import RequestsWhaor from yfs import fuzzy_search , get_options_page watchlist = [] # Lets scrape the first page of eWhispers twitter feed for a list of symbols. with NitterScraper ( port = 8008 ) as nitter : for tweet in nitter . get_tweets ( \"eWhispers\" , pages = 1 ): if tweet . is_pinned : # Lets skip the pinned tweet. continue if tweet . is_retweet : # Lets skip any retweets. continue if tweet . entries . cashtags : # Lets check if cashtags exists in the tweet then add them to the watchlist. watchlist += tweet . entries . cashtags print ( \".\" , end = \"\" , flush = True ) # Quick little progress_bar so we don't get bored. print () # Print new line when complete just to make things look a little cleaner. watchlist = sorted ( set ( map ( lambda cashtag : cashtag . replace ( \"$\" , \"\" ) . strip (), watchlist ))) # Lets sort, remove duplicates, and clean '$' strings from each symbols. valid_symbols = [] # Used to store symbols validated with the fuzzy_search function. call_chains = [] # Used to store all the found call option chains. # Decide on how many threads and proxies your computer can handle MAX_THREADS = 6 # Each proxy is a tor circuit running inside a separate docker container. MAX_PROXIES = 6 with RequestsWhaor ( onion_count = MAX_PROXIES , max_threads = MAX_THREADS ) as request_whaor : # RequestsWhaor will spin up a network of TOR nodes we will use as a rotating proxy. with ThreadPoolExecutor ( max_workers = MAX_THREADS ) as executor : futures = [ executor . submit ( fuzzy_search , ticker , session = request_whaor ) # ^--Here we pass request_whaor as a session like object. for ticker in watchlist ] for future in as_completed ( futures ): result = future . result ( timeout = 60 ) print ( \".\" , end = \"\" , flush = True ) # Quick progress bar. if result : # Now we append the results to the valid_symbols list. valid_symbols . append ( result ) # Lets get the raw symbol from each ValidSymbol object. valid_symbols = [ ticker . symbol for ticker in valid_symbols ] print ( \"found\" , len ( valid_symbols )) # Number of valid symbols found. request_whaor . restart_onions () # Lets get a fresh pool of proxies before the next step. futures = [ executor . submit ( get_options_page , ticker , after_days = 60 , # Lets get options that have at least 60 days before expiring. first_chain = True , # We only want the first expiration with all strike prices. use_fuzzy_search = False , # We did fuzzy search already no need to do it again. session = request_whaor , # pass request_whaor as a session like object. page_not_found_ok = True , # return None if the symbol doesn't have an option page. timeout = 5 , # Pass a 5 second timeout to the session. ) for ticker in valid_symbols ] for future in as_completed ( futures ): try : result = future . result ( timeout = 120 ) print ( \".\" , end = \"\" , flush = True ) # Progress bar. if result : if result . calls : # If the results have a call option chain we will append it to the list. call_chains . append ( result . calls ) except Exception as exc : # We will pass on any exceptions. print ( exc ) first_otm_strike = [] for chain in call_chains : df = chain . dataframe otm = df [ df [ \"in_the_money\" ] == False ] . head ( 1 ) if otm is not None : first_otm_strike . append ( otm ) final = pandas . concat ( first_otm_strike , ignore_index = True ) final . drop ( columns = [ \"timestamp\" , \"contract_name\" ], inplace = True ) final . sort_values ( by = \"implied_volatility\" , inplace = True ) final . reset_index ( inplace = True ) print ( final . to_string ())","title":"Call Options Watchlist"},{"location":"examples/call-options-watchlist/#how-to-build-a-one-delta-otm-call-options-watchlist-from-twitter-cashtags","text":"","title":"How to build a one delta OTM call options watchlist from twitter cashtags."},{"location":"examples/call-options-watchlist/#overview","text":"First, we will scrape a users tweets for cashtags with nitter_scraper Next, we will prepare and clean the tweet data to build a watchlist. After that, we will startup a network of tor nodes behind a reverse proxy, to bypass the yahoo finance rate limit, using requests-whaor Last, we will download, clean, and concatenate all the options data into a single DataFrame.","title":"Overview"},{"location":"examples/call-options-watchlist/#requirements","text":"Docker Engine installed. python ^3.8 poetry","title":"Requirements"},{"location":"examples/call-options-watchlist/#dependencies","text":"yfs nitter_scraper requests-whaor Note requests-whaor will create multiple TOR nodes enclosed in docker containers to proxy your requests.","title":"Dependencies"},{"location":"examples/call-options-watchlist/#environment-preparation","text":"Run the following commands to build a folder and initiate a poetry project. $ mkdir yfs_watchlist $ cd yfs_watchlist $ poetry init Keep hitting the enter button until you are out of the poetry init prompt. Now lets add the dependencies. $ poetry add nitter-scraper $ poetry add requests-whaor $ poetry add yfs Create options_bot.py $ touch options_bot.py Open options_bot.py in your favorite editor.","title":"Environment Preparation"},{"location":"examples/call-options-watchlist/#imports","text":"from concurrent.futures import as_completed , ThreadPoolExecutor The ThreadPoolExecutor is used to call fuzzy_search and get_options_page functions asynchronously with a pool of threads. from nitter_scraper import NitterScraper The nitter_scraper library is used to scrape tweets. import pandas The pandas library is used to clean and concatenate the DataFrames. from requests_whaor import RequestsWhaor The requests_whaor library will supply a rotating proxy server to send our requests through, giving each request a unique IP address. If a request times out or gets a error code from the server it will retry with another IP address. from yfs import fuzzy_search , get_options_page Last we use these yfs functions to search for valid symbols and get options data. from concurrent.futures import as_completed , ThreadPoolExecutor from nitter_scraper import NitterScraper import pandas from requests_whaor import RequestsWhaor from yfs import fuzzy_search , get_options_page The imports should look like this.","title":"Imports"},{"location":"examples/call-options-watchlist/#scrape-twitter-and-build-a-watchlist","text":"watchlist = [] # Lets scrape the first page of eWhispers twitter feed for a list of symbols. with NitterScraper ( port = 8008 ) as nitter : for tweet in nitter . get_tweets ( \"eWhispers\" , pages = 1 ): if tweet . is_pinned : # Lets skip the pinned tweet. continue if tweet . is_retweet : # Lets skip any retweets. continue if tweet . entries . cashtags : # Lets check if cashtags exists in the tweet then add them to the watchlist. watchlist += tweet . entries . cashtags print ( \".\" , end = \"\" , flush = True ) # Quick little progress bar so we don't get bored. print () # Print a new line when complete just to make things look a little cleaner. watchlist = sorted ( set ( map ( lambda cashtag : cashtag . replace ( \"$\" , \"\" ) . strip (), watchlist ))) # Lets sort, remove duplicates, and clean '$' strings from each symbol. Now we have a dynamically generated list of potentially interesting stock symbols. valid_symbols = [] # Used to store symbols validated with the fuzzy_search function. call_chains = [] # Used to store all the found call option chains. # Decide on how many threads and proxies your computer can handle MAX_THREADS = 6 # Each proxy is a tor circuit running inside a separate docker container. MAX_PROXIES = 6 Now on to the meat of the code. with RequestsWhaor ( onion_count = MAX_PROXIES , max_threads = MAX_THREADS ) as request_whaor : # RequestsWhaor will spin up a network of TOR nodes we will use as a rotating proxy. with ThreadPoolExecutor ( max_workers = MAX_THREADS ) as executor : futures = [ executor . submit ( fuzzy_search , ticker , session = request_whaor ) # ^--Here we pass request_whaor as a session like object for yfs fuzzy_search. for ticker in watchlist ] for future in as_completed ( futures ): result = future . result ( timeout = 60 ) print ( \".\" , end = \"\" , flush = True ) # Quick progress bar. if result : # Now we append the results to the valid_symbols list. valid_symbols . append ( result ) # Lets get the raw symbol from each ValidSymbol object. valid_symbols = [ ticker . symbol for ticker in valid_symbols ] print ( \"found\" , len ( valid_symbols )) # Number of valid symbols found. request_whaor . restart_onions () # Lets get a fresh pool of proxies before the next step. futures = [ executor . submit ( get_options_page , ticker , after_days = 60 , # Lets get options that have at least 60 days before expiring. first_chain = True , # We only want the first expiration with all strike prices. use_fuzzy_search = False , # We did fuzzy search already no need to do it again. session = request_whaor , # pass request_whaor as a session like object to yfs. page_not_found_ok = True , # return None if the symbol doesn't have an option page. timeout = 5 , # Pass a 5 second timeout to the session. ) for ticker in valid_symbols ] for future in as_completed ( futures ): try : result = future . result ( timeout = 120 ) print ( \".\" , end = \"\" , flush = True ) # Progress bar. if result : if result . calls : # If the results have a call option chain we will append it to the list. call_chains . append ( result . calls ) except Exception as exc : # We will pass on any exceptions. print ( exc ) Note ThreadPoolExecutor information here.","title":"Scrape Twitter and build a watchlist"},{"location":"examples/call-options-watchlist/#final-section","text":"First, iterate over the result. Then, convert each chain into a dataframe. Next, get the first out of the money option and append it to a list. After that, concatenate the list of single option contract dataframes into a single dataframe. Now lets, drop some columns and sort by implied volatility to make things look pretty. Finally, print the results. first_otm_strike = [] for chain in call_chains : df = chain . dataframe otm = df [ df [ \"in_the_money\" ] == False ] . head ( 1 ) if otm is not None : first_otm_strike . append ( otm ) final = pandas . concat ( first_otm_strike , ignore_index = True ) final . drop ( columns = [ \"timestamp\" , \"contract_name\" ], inplace = True ) final . sort_values ( by = \"implied_volatility\" , inplace = True ) final . reset_index ( inplace = True ) print ( final . to_string ()) Now we have a single dataframe of one delta OTM call options built from a dynamically generated watch list. Output index symbol contract_type expiration_date in_the_money strike last_price bid ask change percent_change volume open_interest implied_volatility 0 122 SNX call 2020 -12-18 00 :00:00+00:00 False 155 .0 5 .92 0 .00 0 .00 0 .00 NaN 7 19 .0 1 .56 1 10 AZZ call 2021 -02-19 00 :00:00+00:00 False 40 .0 2 .00 0 .00 0 .00 0 .00 None 1 0 .0 3 .13 2 133 USAT call 2021 -01-15 00 :00:00+00:00 False 10 .0 1 .25 0 .00 0 .00 0 .00 None 2 41 .0 12 .50 3 116 SINA call 2020 -12-18 00 :00:00+00:00 False 45 .0 0 .05 0 .05 0 .50 0 .00 NaN 5 59 .0 18 .36 4 71 JNJ call 2020 -12-18 00 :00:00+00:00 False 155 .0 3 .75 3 .70 3 .80 0 .55 17 .19 150 3168 .0 21 .05 5 94 PEP call 2020 -12-18 00 :00:00+00:00 False 140 .0 4 .26 4 .15 4 .45 0 .10 2 .4 38 4826 .0 21 .51 6 31 COST call 2021 -01-15 00 :00:00+00:00 False 370 .0 18 .60 18 .50 18 .95 1 .46 8 .52 90 1326 .0 25 .29 7 55 GIS call 2021 -01-15 00 :00:00+00:00 False 62 .5 2 .99 2 .57 2 .99 0 .39 15 7 1501 .0 25 .78 8 59 INFO call 2020 -12-18 00 :00:00+00:00 False 80 .0 3 .46 2 .65 3 .10 0 .00 None 1 314 .0 27 .06 9 95 PGR call 2021 -01-15 00 :00:00+00:00 False 100 .0 5 .15 5 .00 5 .60 0 .65 14 .44 29 613 .0 27 .55 10 81 MKC call 2020 -12-18 00 :00:00+00:00 False 200 .0 7 .50 7 .10 7 .70 0 .50 7 .14 6 188 .0 27 .72 11 0 ACN call 2021 -01-15 00 :00:00+00:00 False 230 .0 12 .50 12 .40 13 .20 1 .50 13 .64 63 596 .0 29 .38 12 27 CAG call 2020 -12-18 00 :00:00+00:00 False 38 .0 1 .54 1 .40 1 .60 -0.06 -3.75 2 523 .0 29 .42 13 97 PAYX call 2020 -12-18 00 :00:00+00:00 False 82 .5 3 .80 3 .80 4 .20 0 .00 NaN 4 1391 .0 29 .74 14 93 ORCL call 2020 -12-18 00 :00:00+00:00 False 62 .5 2 .53 2 .47 2 .60 0 .08 3 .27 27 9815 .0 30 .14 15 139 WABC call 2021 -01-15 00 :00:00+00:00 False 65 .0 0 .80 0 .75 1 .05 0 .00 None 2 22 .0 30 .74 16 22 BLK call 2021 -01-15 00 :00:00+00:00 False 620 .0 32 .10 28 .00 36 .20 1 .75 5 .77 46 140 .0 31 .83 17 88 NKE call 2021 -01-15 00 :00:00+00:00 False 135 .0 6 .85 6 .70 6 .85 0 .35 5 .38 92 2130 .0 31 .89 18 74 KSU call 2020 -12-18 00 :00:00+00:00 False 190 .0 8 .40 6 .20 9 .00 0 .78 10 .24 1 57 .0 32 .46 19 21 BK call 2020 -12-18 00 :00:00+00:00 False 40 .0 1 .20 1 .10 1 .25 0 .15 14 .29 150 2705 .0 32 .86 20 50 FRC call 2021 -02-19 00 :00:00+00:00 False 125 .0 1 .66 8 .40 9 .20 0 .00 NaN 1 4 .0 32 .98 21 144 WNS call 2021 -01-15 00 :00:00+00:00 False 75 .0 1 .15 1 .45 1 .90 0 .00 None 48 103 .0 33 .03 22 41 DPZ call 2020 -12-18 00 :00:00+00:00 False 400 .0 18 .00 15 .00 18 .90 -7.10 -28.29 147 265 .0 33 .77 23 28 CASY call 2021 -02-19 00 :00:00+00:00 False 185 .0 10 .90 10 .50 14 .20 0 .00 None NaN 8 .0 34 .07 24 102 PNC call 2021 -01-15 00 :00:00+00:00 False 120 .0 6 .30 5 .70 6 .20 -0.60 -8.7 21 451 .0 34 .17 25 111 RPM call 2021 -02-19 00 :00:00+00:00 False 90 .0 5 .40 4 .00 6 .00 0 .00 NaN 2 178 .0 34 .38 26 47 FDS call 2020 -12-18 00 :00:00+00:00 False 330 .0 16 .01 14 .50 18 .50 0 .00 None 1 38 .0 34 .64 27 61 JBHT call 2021 -01-15 00 :00:00+00:00 False 140 .0 6 .50 6 .20 7 .60 -0.40 -5.8 2 51 .0 34 .69 28 52 GS call 2021 -01-15 00 :00:00+00:00 False 210 .0 13 .50 13 .40 13 .70 -0.89 -6.18 236 3466 .0 34 .74 29 44 FAST call 2021 -01-15 00 :00:00+00:00 False 47 .5 2 .75 2 .60 2 .95 0 .10 3 .77 5 293 .0 34 .83 30 135 UNH call 2020 -12-18 00 :00:00+00:00 False 330 .0 17 .84 15 .75 18 .80 3 .24 22 .19 100 1289 .0 34 .84 31 121 STZ call 2021 -01-15 00 :00:00+00:00 False 190 .0 10 .30 10 .10 11 .90 0 .50 5 .1 41 744 .0 34 .92 32 19 AZO call 2020 -12-18 00 :00:00+00:00 False 1140 .0 72 .00 60 .90 68 .50 0 .00 NaN 1 5 .0 35 .27 33 101 PRGS call 2020 -12-18 00 :00:00+00:00 False 45 .0 0 .67 0 .60 0 .90 0 .00 NaN 6 399 .0 35 .60 34 69 JPM call 2020 -12-18 00 :00:00+00:00 False 105 .0 4 .55 4 .50 4 .65 -0.63 -12.16 280 12567 .0 35 .66 35 65 INFY call 2021 -01-15 00 :00:00+00:00 False 16 .0 0 .75 0 .70 0 .80 0 .15 25 31 328 .0 36 .08 36 84 MS call 2020 -12-18 00 :00:00+00:00 False 50 .0 2 .52 2 .53 2 .58 -0.21 -7.69 2415 1027 .0 36 .55 37 39 CTAS call 2020 -12-18 00 :00:00+00:00 False 340 .0 19 .75 17 .10 21 .50 0 .00 NaN 2 14 .0 36 .91 38 54 HDS call 2020 -12-18 00 :00:00+00:00 False 45 .0 1 .80 1 .65 1 .90 0 .20 12 .5 3 176 .0 37 .23 39 13 BAC call 2020 -12-18 00 :00:00+00:00 False 26 .0 1 .31 1 .31 1 .37 -0.05 -3.68 937 20691 .0 37 .55 40 33 CALM call 2020 -12-18 00 :00:00+00:00 False 40 .0 1 .50 1 .40 1 .70 -0.40 -21.05 20 49 .0 38 .09 41 7 ASML call 2021 -01-15 00 :00:00+00:00 False 390 .0 28 .40 27 .40 30 .00 4 .50 18 .83 3 479 .0 38 .13 42 114 SCHW call 2020 -12-18 00 :00:00+00:00 False 39 .0 1 .89 1 .98 2 .19 -0.01 -0.53 39 373 .0 38 .21 43 16 C call 2020 -12-18 00 :00:00+00:00 False 45 .0 2 .95 2 .91 2 .97 -0.10 -3.28 165 10174 .0 38 .57 44 60 ISRG call 2020 -12-18 00 :00:00+00:00 False 740 .0 48 .00 43 .70 50 .40 13 .60 39 .53 5 217 .0 40 .06 45 129 TFC call 2020 -12-18 00 :00:00+00:00 False 45 .0 1 .97 1 .95 2 .25 -0.09 -4.37 2 3577 .0 40 .09 46 56 HELE call 2020 -12-18 00 :00:00+00:00 False 200 .0 7 .93 9 .80 12 .90 0 .00 NaN 2 12 .0 40 .09 47 75 LNDC call 2020 -12-18 00 :00:00+00:00 False 12 .5 0 .10 0 .05 0 .10 -0.05 -33.33 1 56 .0 40 .23 48 137 VFC call 2021 -01-15 00 :00:00+00:00 False 80 .0 4 .80 4 .90 5 .40 0 .00 NaN 7 160 .0 40 .33 49 79 LW call 2021 -01-15 00 :00:00+00:00 False 75 .0 5 .40 4 .80 5 .30 -0.60 -10 1 251 .0 40 .44 50 123 STT call 2021 -01-15 00 :00:00+00:00 False 67 .5 4 .70 4 .70 5 .10 1 .80 62 .07 2 145 .0 40 .87 51 134 USB call 2020 -12-18 00 :00:00+00:00 False 40 .0 2 .42 2 .19 2 .41 -0.19 -7.28 59 3619 .0 40 .92 52 1 ABM call 2021 -01-15 00 :00:00+00:00 False 40 .0 2 .11 1 .60 2 .00 0 .00 None 1 90 .0 41 .53 53 48 FDX call 2021 -01-15 00 :00:00+00:00 False 280 .0 19 .34 18 .95 19 .55 -0.96 -4.73 152 2159 .0 41 .57 54 9 AYI call 2020 -12-18 00 :00:00+00:00 False 100 .0 7 .90 5 .80 7 .10 -8.45 -51.68 125 24 .0 42 .15 55 36 CMC call 2020 -12-18 00 :00:00+00:00 False 23 .0 1 .50 1 .35 1 .50 0 .10 7 .14 24 1212 .0 42 .33 56 107 RGP call 2021 -02-19 00 :00:00+00:00 False 12 .5 0 .75 0 .65 0 .85 0 .75 None 56 347 .0 42 .53 57 8 ADBE call 2020 -12-18 00 :00:00+00:00 False 505 .0 33 .63 34 .30 35 .90 3 .82 12 .81 30 1044 .0 42 .76 58 125 TCOM call 2020 -12-18 00 :00:00+00:00 False 33 .0 2 .10 1 .80 2 .03 0 .00 NaN 54 2102 .0 42 .92 59 142 WFC call 2020 -12-18 00 :00:00+00:00 False 27 .5 1 .02 1 .01 1 .07 -0.04 -3.77 550 31241 .0 43 .31 60 130 TSM call 2020 -12-18 00 :00:00+00:00 False 90 .0 6 .15 6 .00 6 .20 0 .45 7 .89 406 1115 .0 43 .87 61 82 MTN call 2020 -12-18 00 :00:00+00:00 False 250 .0 9 .00 11 .10 14 .90 0 .00 NaN 1 45 .0 44 .12 62 138 VRNT call 2020 -12-18 00 :00:00+00:00 False 55 .0 2 .80 2 .95 3 .30 0 .30 12 2 3136 .0 44 .12 63 141 WBA call 2020 -12-18 00 :00:00+00:00 False 37 .5 2 .01 1 .58 2 .33 -0.18 -8.22 1 370 .0 44 .92 64 42 EDU call 2021 -01-15 00 :00:00+00:00 False 175 .0 7 .18 12 .60 13 .60 0 .00 NaN 1 15 .0 45 .00 65 72 LEN call 2021 -01-15 00 :00:00+00:00 False 85 .0 7 .30 7 .20 7 .40 -0.20 -2.67 22 832 .0 45 .29 66 66 JBL call 2020 -12-18 00 :00:00+00:00 False 37 .0 2 .45 2 .20 2 .65 0 .35 16 .67 1 12 .0 46 .51 67 43 EPAC call 2021 -02-19 00 :00:00+00:00 False 20 .0 1 .55 1 .25 2 .05 0 .00 None 153 289 .0 46 .63 68 35 CVGW call 2021 -01-15 00 :00:00+00:00 False 70 .0 4 .00 3 .90 6 .00 0 .00 None NaN 4 .0 46 .89 69 68 KMX call 2021 -01-15 00 :00:00+00:00 False 95 .0 8 .00 7 .90 9 .20 -0.90 -10.11 17 944 .0 47 .31 70 85 MU call 2020 -12-18 00 :00:00+00:00 False 50 .0 4 .00 4 .00 4 .10 4 .00 None 444 994 .0 48 .05 71 80 LULU call 2020 -12-18 00 :00:00+00:00 False 350 .0 26 .80 26 .80 27 .25 3 .35 14 .29 123 480 .0 48 .07 72 40 DRI call 2021 -01-15 00 :00:00+00:00 False 105 .0 8 .80 8 .20 8 .80 0 .44 5 .26 3 857 .0 48 .21 73 57 HOMB call 2020 -12-18 00 :00:00+00:00 False 17 .5 0 .90 0 .70 1 .20 0 .00 None 55 187 .0 49 .22 74 11 APOG call 2021 -02-19 00 :00:00+00:00 False 30 .0 1 .35 1 .40 1 .50 0 .22 19 .47 2 204 .0 49 .71 75 73 LEVI call 2021 -01-15 00 :00:00+00:00 False 16 .0 1 .20 1 .20 1 .25 -0.25 -17.24 100 1362 .0 50 .44 76 140 WB call 2021 -01-15 00 :00:00+00:00 False 45 .0 2 .88 2 .55 3 .10 -0.02 -0.69 16 1531 .0 50 .46 77 143 WOR call 2020 -12-18 00 :00:00+00:00 False 50 .0 3 .13 2 .15 3 .30 0 .23 7 .93 7 359 .0 50 .76 78 67 KBH call 2021 -01-15 00 :00:00+00:00 False 45 .0 2 .80 2 .60 2 .80 0 .44 18 .64 17 271 .0 50 .98 79 26 ALLY call 2020 -12-18 00 :00:00+00:00 False 28 .0 2 .57 2 .20 2 .59 0 .15 6 .2 35 1403 .0 51 .07 80 99 PHR call 2021 -01-15 00 :00:00+00:00 False 35 .0 2 .50 1 .85 2 .60 0 .30 13 .64 1 49 .0 51 .51 81 17 AVAV call 2020 -12-18 00 :00:00+00:00 False 75 .0 5 .00 4 .40 5 .20 0 .71 16 .55 4 104 .0 51 .79 82 18 BB call 2020 -12-18 00 :00:00+00:00 False 5 .0 0 .31 0 .30 0 .33 0 .01 3 .33 18 1416 .0 51 .95 83 34 CMD call 2020 -12-18 00 :00:00+00:00 False 50 .0 2 .65 2 .75 3 .70 0 .00 NaN 3 3 .0 52 .47 84 90 NEOG call 2021 -01-15 00 :00:00+00:00 False 80 .0 7 .00 2 .50 7 .50 0 .00 None 2 15 .0 54 .53 85 146 ZS call 2021 -01-15 00 :00:00+00:00 False 155 .0 15 .85 14 .75 16 .65 1 .45 10 .07 115 1113 .0 54 .60 86 109 SCHL call 2020 -12-18 00 :00:00+00:00 False 22 .5 1 .45 1 .20 1 .70 0 .00 NaN 5 13 .0 54 .79 87 6 ANGO call 2021 -01-15 00 :00:00+00:00 False 12 .5 1 .02 0 .70 1 .25 0 .00 NaN 3 36 .0 55 .47 88 49 FUL call 2021 -02-19 00 :00:00+00:00 False 50 .0 4 .20 2 .75 6 .30 0 .00 None 1 126 .0 55 .47 89 30 CBRL call 2020 -12-18 00 :00:00+00:00 False 120 .0 8 .60 7 .70 10 .60 0 .00 None 2 141 .0 55 .54 90 120 SLB call 2020 -12-18 00 :00:00+00:00 False 17 .5 1 .07 1 .03 1 .11 1 .07 None 8 58 .0 55 .76 91 147 ZUMZ call 2021 -02-19 00 :00:00+00:00 False 35 .0 2 .66 2 .65 3 .00 0 .00 NaN 2 37 .0 56 .10 92 24 CAMP call 2020 -12-18 00 :00:00+00:00 False 10 .0 0 .20 0 .00 0 .40 0 .00 None 10 570 .0 56 .25 93 98 OSH call 2021 -04-16 00 :00:00+00:00 False 65 .0 4 .76 2 .50 6 .30 4 .76 None 100 101 .0 56 .38 94 64 HQY call 2020 -12-18 00 :00:00+00:00 False 60 .0 3 .50 3 .40 3 .70 0 .00 NaN 1 584 .0 56 .49 95 32 COUP call 2020 -12-18 00 :00:00+00:00 False 310 .0 29 .00 27 .30 28 .60 5 .33 22 .52 7 78 .0 57 .75 96 77 LMNR call 2020 -12-18 00 :00:00+00:00 False 15 .0 1 .25 1 .05 1 .95 0 .00 None 2 2 .0 58 .20 97 127 THO call 2020 -12-18 00 :00:00+00:00 False 97 .5 9 .00 9 .20 9 .70 -6.20 -40.79 11 27 .0 58 .96 98 110 RH call 2021 -01-15 00 :00:00+00:00 False 380 .0 44 .15 41 .60 43 .30 -0.07 -0.16 8 412 .0 60 .54 99 89 NG call 2020 -12-18 00 :00:00+00:00 False 12 .0 0 .77 0 .85 1 .05 0 .00 NaN 20 1163 .0 60 .64 100 37 CMTL call 2021 -01-15 00 :00:00+00:00 False 17 .5 1 .75 1 .55 1 .70 0 .55 45 .83 1 312 .0 60 .94 101 5 AEO call 2021 -01-15 00 :00:00+00:00 False 16 .0 1 .70 1 .55 1 .80 -0.20 -10.53 20 270 .0 62 .40 102 112 SCWX call 2021 -01-15 00 :00:00+00:00 False 12 .5 1 .00 1 .15 1 .30 0 .00 None 61 148 .0 62 .70 103 103 RFIL call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .35 0 .30 0 .50 0 .00 None 9 122 .0 63 .67 104 148 WORK call 2020 -12-18 00 :00:00+00:00 False 32 .0 3 .00 2 .95 3 .05 0 .51 20 .48 608 8478 .0 63 .84 105 4 AA call 2020 -12-18 00 :00:00+00:00 False 13 .0 1 .26 1 .16 1 .24 0 .00 NaN 6 145 .0 64 .70 106 29 CHWY call 2021 -01-15 00 :00:00+00:00 False 65 .0 6 .90 6 .80 6 .95 1 .31 23 .43 449 3579 .0 65 .43 107 119 SLQT call 2021 -01-15 00 :00:00+00:00 False 20 .0 2 .40 2 .35 2 .60 -0.20 -7.69 12 361 .0 65 .63 108 38 DAL call 2020 -12-18 00 :00:00+00:00 False 33 .0 3 .65 3 .55 3 .80 0 .00 NaN 19 1220 .0 66 .26 109 126 SNBR call 2020 -12-18 00 :00:00+00:00 False 60 .0 3 .50 4 .20 5 .10 0 .00 NaN 5 129 .0 66 .75 110 117 SGH call 2020 -12-18 00 :00:00+00:00 False 30 .0 1 .00 0 .50 2 .25 -0.05 -4.76 1 79 .0 68 .07 111 131 UEPS call 2021 -01-15 00 :00:00+00:00 False 4 .0 0 .38 0 .15 0 .40 0 .00 None 63 326 .0 68 .36 112 87 NAV call 2020 -12-18 00 :00:00+00:00 False 46 .0 2 .70 0 .20 5 .00 2 .70 None 3 0 .0 70 .92 113 86 NCNO call 2021 -02-19 00 :00:00+00:00 False 80 .0 13 .54 13 .00 13 .90 0 .84 6 .61 8 52 .0 71 .03 114 124 TACO call 2020 -12-18 00 :00:00+00:00 False 10 .0 0 .94 0 .80 1 .05 0 .09 10 .59 14 893 .0 71 .09 115 132 UNFI call 2021 -02-19 00 :00:00+00:00 False 17 .5 2 .75 2 .50 3 .00 0 .05 1 .85 58 550 .0 72 .07 116 78 MCFT call 2021 -01-15 00 :00:00+00:00 False 20 .0 2 .95 2 .55 3 .40 0 .00 NaN 1 16 .0 72 .75 117 115 SFIX call 2020 -12-18 00 :00:00+00:00 False 32 .0 3 .39 3 .65 3 .85 -0.20 -5.57 24 277 .0 73 .05 118 62 HMY call 2021 -01-15 00 :00:00+00:00 False 6 .0 0 .90 0 .75 1 .00 0 .20 28 .57 24 1835 .0 73 .24 119 104 REVG call 2021 -01-15 00 :00:00+00:00 False 10 .0 0 .50 0 .45 1 .20 0 .00 None 5 43 .0 73 .44 120 100 PTON call 2021 -01-15 00 :00:00+00:00 False 125 .0 19 .00 17 .50 19 .00 3 .87 25 .58 198 1423 .0 75 .85 121 14 BBBY call 2020 -12-18 00 :00:00+00:00 False 22 .0 2 .67 2 .59 2 .69 -0.26 -8.87 12 549 .0 77 .34 122 145 VITL call 2021 -01-15 00 :00:00+00:00 False 40 .0 7 .00 5 .30 6 .90 0 .00 NaN 3 10 .0 77 .73 123 136 UAL call 2020 -12-18 00 :00:00+00:00 False 38 .0 4 .70 4 .60 4 .70 0 .40 9 .3 42 1094 .0 78 .32 124 12 APHA call 2021 -01-15 00 :00:00+00:00 False 6 .0 0 .82 0 .80 0 .85 -0.07 -7.87 150 5032 .0 78 .71 125 70 LAKE call 2021 -01-15 00 :00:00+00:00 False 25 .0 2 .85 2 .75 3 .10 0 .60 26 .67 68 972 .0 79 .88 126 128 TNP call 2020 -12-18 00 :00:00+00:00 False 10 .0 0 .50 0 .45 0 .60 -0.13 -20.63 61 267 .0 80 .47 127 105 RAD call 2021 -01-15 00 :00:00+00:00 False 11 .0 1 .30 1 .09 1 .53 -0.09 -6.47 45 367 .0 80 .76 128 45 EPM call 2021 -01-15 00 :00:00+00:00 False 2 .5 0 .30 0 .05 0 .50 0 .10 50 2 71 .0 85 .16 129 23 BRC call 2021 -05-21 00 :00:00+00:00 False 45 .0 3 .40 0 .20 10 .00 0 .00 None None 32 .0 86 .30 130 51 GIII call 2020 -12-18 00 :00:00+00:00 False 17 .5 1 .45 1 .45 1 .70 0 .00 NaN 9 492 .0 87 .74 131 25 CCL call 2021 -01-15 00 :00:00+00:00 False 17 .5 2 .21 2 .10 2 .21 0 .09 4 .25 7323 25364 .0 87 .94 132 46 FLR call 2021 -01-15 00 :00:00+00:00 False 12 .5 1 .46 1 .35 1 .50 -0.03 -2.01 327 4591 .0 89 .06 133 76 LOVE call 2021 -01-15 00 :00:00+00:00 False 35 .0 6 .17 5 .40 6 .20 1 .17 23 .4 8 72 .0 89 .40 134 3 AGTC call 2021 -01-15 00 :00:00+00:00 False 7 .5 0 .50 0 .35 0 .65 0 .00 None 11 2942 .0 93 .95 135 91 MRTN call 2020 -12-18 00 :00:00+00:00 False 17 .5 1 .75 0 .00 2 .90 0 .00 None NaN 2 .0 98 .39 136 63 JKS call 2020 -12-18 00 :00:00+00:00 False 65 .0 10 .00 8 .70 11 .00 3 .80 61 .29 120 277 .0 99 .05 137 96 PLAY call 2021 -01-15 00 :00:00+00:00 False 17 .5 2 .85 2 .65 2 .90 0 .05 1 .79 106 1772 .0 100 .44 138 20 BIGC call 2021 -01-15 00 :00:00+00:00 False 100 .0 19 .24 19 .00 19 .35 2 .88 17 .6 70 1036 .0 100 .83 139 92 NTWK call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .10 0 .00 0 .30 0 .00 NaN 5 68 .0 103 .52 140 108 RLGT call 2020 -12-18 00 :00:00+00:00 False 7 .5 0 .10 0 .00 0 .80 0 .00 None 2 17 .0 112 .50 141 58 ICMB call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .20 0 .00 0 .50 0 .00 None 30 126 .0 117 .19 142 113 SANW call 2021 -02-19 00 :00:00+00:00 False 2 .5 1 .11 0 .00 1 .25 0 .00 None 12 6 .0 122 .66 143 2 ACB call 2020 -12-18 00 :00:00+00:00 False 6 .0 0 .75 0 .62 0 .88 0 .00 NaN 255 1199 .0 124 .22 144 83 MEIP call 2020 -12-18 00 :00:00+00:00 False 5 .0 0 .20 0 .20 0 .25 0 .00 None 6 12699 .0 127 .73 145 106 QTT call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .25 0 .10 0 .35 0 .10 66 .67 3 285 .0 132 .42 146 53 GME call 2020 -12-18 00 :00:00+00:00 False 13 .0 2 .49 2 .45 2 .76 2 .49 None 101 27 .0 143 .85 147 118 SEAC call 2021 -01-15 00 :00:00+00:00 False 2 .5 0 .05 0 .00 0 .15 0 .00 None 1 1805 .0 169 .53 148 15 BCLI call 2020 -12-18 00 :00:00+00:00 False 20 .0 7 .00 6 .60 7 .50 0 .04 0 .57 37 764 .0 266 .89","title":"Final Section"},{"location":"examples/call-options-watchlist/#full-script","text":"from concurrent.futures import as_completed , ThreadPoolExecutor from nitter_scraper import NitterScraper import pandas from requests_whaor import RequestsWhaor from yfs import fuzzy_search , get_options_page watchlist = [] # Lets scrape the first page of eWhispers twitter feed for a list of symbols. with NitterScraper ( port = 8008 ) as nitter : for tweet in nitter . get_tweets ( \"eWhispers\" , pages = 1 ): if tweet . is_pinned : # Lets skip the pinned tweet. continue if tweet . is_retweet : # Lets skip any retweets. continue if tweet . entries . cashtags : # Lets check if cashtags exists in the tweet then add them to the watchlist. watchlist += tweet . entries . cashtags print ( \".\" , end = \"\" , flush = True ) # Quick little progress_bar so we don't get bored. print () # Print new line when complete just to make things look a little cleaner. watchlist = sorted ( set ( map ( lambda cashtag : cashtag . replace ( \"$\" , \"\" ) . strip (), watchlist ))) # Lets sort, remove duplicates, and clean '$' strings from each symbols. valid_symbols = [] # Used to store symbols validated with the fuzzy_search function. call_chains = [] # Used to store all the found call option chains. # Decide on how many threads and proxies your computer can handle MAX_THREADS = 6 # Each proxy is a tor circuit running inside a separate docker container. MAX_PROXIES = 6 with RequestsWhaor ( onion_count = MAX_PROXIES , max_threads = MAX_THREADS ) as request_whaor : # RequestsWhaor will spin up a network of TOR nodes we will use as a rotating proxy. with ThreadPoolExecutor ( max_workers = MAX_THREADS ) as executor : futures = [ executor . submit ( fuzzy_search , ticker , session = request_whaor ) # ^--Here we pass request_whaor as a session like object. for ticker in watchlist ] for future in as_completed ( futures ): result = future . result ( timeout = 60 ) print ( \".\" , end = \"\" , flush = True ) # Quick progress bar. if result : # Now we append the results to the valid_symbols list. valid_symbols . append ( result ) # Lets get the raw symbol from each ValidSymbol object. valid_symbols = [ ticker . symbol for ticker in valid_symbols ] print ( \"found\" , len ( valid_symbols )) # Number of valid symbols found. request_whaor . restart_onions () # Lets get a fresh pool of proxies before the next step. futures = [ executor . submit ( get_options_page , ticker , after_days = 60 , # Lets get options that have at least 60 days before expiring. first_chain = True , # We only want the first expiration with all strike prices. use_fuzzy_search = False , # We did fuzzy search already no need to do it again. session = request_whaor , # pass request_whaor as a session like object. page_not_found_ok = True , # return None if the symbol doesn't have an option page. timeout = 5 , # Pass a 5 second timeout to the session. ) for ticker in valid_symbols ] for future in as_completed ( futures ): try : result = future . result ( timeout = 120 ) print ( \".\" , end = \"\" , flush = True ) # Progress bar. if result : if result . calls : # If the results have a call option chain we will append it to the list. call_chains . append ( result . calls ) except Exception as exc : # We will pass on any exceptions. print ( exc ) first_otm_strike = [] for chain in call_chains : df = chain . dataframe otm = df [ df [ \"in_the_money\" ] == False ] . head ( 1 ) if otm is not None : first_otm_strike . append ( otm ) final = pandas . concat ( first_otm_strike , ignore_index = True ) final . drop ( columns = [ \"timestamp\" , \"contract_name\" ], inplace = True ) final . sort_values ( by = \"implied_volatility\" , inplace = True ) final . reset_index ( inplace = True ) print ( final . to_string ())","title":"Full Script"},{"location":"examples/extras/","text":"Extra Examples Poll bitmex chat example. from datetime import datetime from typing import List from requests_whaor import RequestsWhaor from pydantic import BaseModel as Base from pydantic import Field class Mexssage ( Base ): id : int date : datetime user : str message : str channel : int = Field ( alias = \"channelID\" ) from_bot : bool = Field ( alias = \"fromBot\" ) class MexssageList ( Base ): message_list : List [ Mexssage ] def __iter__ ( self ): return iter ( self . message_list ) URL = \"https://www.bitmex.com/api/v1/chat?count=50&reverse=true\" PROXY_COUNT = 10 last_mexssage = None request_count = 1 print ( \"Websockets?! Where we're going We don't need Websockets!!!\" ) with RequestsWhaor ( onion_count = PROXY_COUNT ) as requests_whaor : while True : resp = requests_whaor . get ( URL ) request_count += 1 mexssage = MexssageList ( message_list = resp . json ()) for msg in mexssage : if last_mexssage is None : last_mexssage = msg . id if msg . id > last_mexssage : last_mexssage = msg . id print ( msg . json ( indent = 4 )) if request_count % 100 == 0 : requests_whaor . restart_onions () Note You should use websockets for this.","title":"Extras"},{"location":"examples/extras/#extra-examples","text":"","title":"Extra Examples"},{"location":"examples/extras/#poll-bitmex-chat-example","text":"from datetime import datetime from typing import List from requests_whaor import RequestsWhaor from pydantic import BaseModel as Base from pydantic import Field class Mexssage ( Base ): id : int date : datetime user : str message : str channel : int = Field ( alias = \"channelID\" ) from_bot : bool = Field ( alias = \"fromBot\" ) class MexssageList ( Base ): message_list : List [ Mexssage ] def __iter__ ( self ): return iter ( self . message_list ) URL = \"https://www.bitmex.com/api/v1/chat?count=50&reverse=true\" PROXY_COUNT = 10 last_mexssage = None request_count = 1 print ( \"Websockets?! Where we're going We don't need Websockets!!!\" ) with RequestsWhaor ( onion_count = PROXY_COUNT ) as requests_whaor : while True : resp = requests_whaor . get ( URL ) request_count += 1 mexssage = MexssageList ( message_list = resp . json ()) for msg in mexssage : if last_mexssage is None : last_mexssage = msg . id if msg . id > last_mexssage : last_mexssage = msg . id print ( msg . json ( indent = 4 )) if request_count % 100 == 0 : requests_whaor . restart_onions () Note You should use websockets for this.","title":"Poll bitmex chat example."}]}